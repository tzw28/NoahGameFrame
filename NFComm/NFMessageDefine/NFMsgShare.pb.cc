// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#include "NFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EffectData_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Ident_NFMsgBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInfoUnit_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelSyncUnit_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelViewSyncUnit_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerEntryInfo_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PosSyncUnit_NFMsgShare_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_NFMsgBase_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_NFMsgBase_2eproto;
namespace NFMsg {
class ReqEnterGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqEnterGameServer> _instance;
} _ReqEnterGameServer_default_instance_;
class ReqAckEnterGameSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckEnterGameSuccess> _instance;
} _ReqAckEnterGameSuccess_default_instance_;
class ReqHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqHeartBeat> _instance;
} _ReqHeartBeat_default_instance_;
class ReqLeaveGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqLeaveGameServer> _instance;
} _ReqLeaveGameServer_default_instance_;
class PlayerEntryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerEntryInfo> _instance;
} _PlayerEntryInfo_default_instance_;
class AckPlayerEntryListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckPlayerEntryList> _instance;
} _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckPlayerLeaveList> _instance;
} _AckPlayerLeaveList_default_instance_;
class PosSyncUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PosSyncUnit> _instance;
} _PosSyncUnit_default_instance_;
class ReqAckPlayerPosSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckPlayerPosSync> _instance;
} _ReqAckPlayerPosSync_default_instance_;
class EffectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EffectData> _instance;
} _EffectData_default_instance_;
class ReqAckUseSkillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckUseSkill> _instance;
} _ReqAckUseSkill_default_instance_;
class ReqAckSwapSceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckSwapScene> _instance;
} _ReqAckSwapScene_default_instance_;
class ReqAckPlayerChatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckPlayerChat> _instance;
} _ReqAckPlayerChat_default_instance_;
class ModelSyncUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelSyncUnit> _instance;
} _ModelSyncUnit_default_instance_;
class ReqAckModelSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckModelSync> _instance;
} _ReqAckModelSync_default_instance_;
class ModelInfoUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelInfoUnit> _instance;
} _ModelInfoUnit_default_instance_;
class ReqAckModelInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckModelInfoList> _instance;
} _ReqAckModelInfoList_default_instance_;
class ReqAckModelTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckModelTarget> _instance;
} _ReqAckModelTarget_default_instance_;
class ReqAckModelSwitchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckModelSwitch> _instance;
} _ReqAckModelSwitch_default_instance_;
class ModelViewSyncUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModelViewSyncUnit> _instance;
} _ModelViewSyncUnit_default_instance_;
class ReqAckModelViewSyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckModelViewSync> _instance;
} _ReqAckModelViewSync_default_instance_;
class ReqAckModelViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqAckModelView> _instance;
} _ReqAckModelView_default_instance_;
}  // namespace NFMsg
static void InitDefaultsscc_info_AckPlayerEntryList_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPlayerEntryList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerEntryList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerEntryList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckPlayerEntryList_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckPlayerEntryList_NFMsgShare_2eproto}, {
      &scc_info_PlayerEntryInfo_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_AckPlayerLeaveList_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_AckPlayerLeaveList_default_instance_;
    new (ptr) ::NFMsg::AckPlayerLeaveList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::AckPlayerLeaveList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckPlayerLeaveList_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AckPlayerLeaveList_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_EffectData_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_EffectData_default_instance_;
    new (ptr) ::NFMsg::EffectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::EffectData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EffectData_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EffectData_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ModelInfoUnit_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ModelInfoUnit_default_instance_;
    new (ptr) ::NFMsg::ModelInfoUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ModelInfoUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelInfoUnit_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelInfoUnit_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ModelSyncUnit_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ModelSyncUnit_default_instance_;
    new (ptr) ::NFMsg::ModelSyncUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ModelSyncUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModelSyncUnit_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModelSyncUnit_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ModelViewSyncUnit_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ModelViewSyncUnit_default_instance_;
    new (ptr) ::NFMsg::ModelViewSyncUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ModelViewSyncUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ModelViewSyncUnit_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ModelViewSyncUnit_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_Vector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_PlayerEntryInfo_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PlayerEntryInfo_default_instance_;
    new (ptr) ::NFMsg::PlayerEntryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PlayerEntryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlayerEntryInfo_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlayerEntryInfo_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_PosSyncUnit_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PosSyncUnit_default_instance_;
    new (ptr) ::NFMsg::PosSyncUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PosSyncUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PosSyncUnit_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PosSyncUnit_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_Vector3_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckEnterGameSuccess_default_instance_;
    new (ptr) ::NFMsg::ReqAckEnterGameSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckEnterGameSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqAckModelInfoList_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckModelInfoList_default_instance_;
    new (ptr) ::NFMsg::ReqAckModelInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckModelInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckModelInfoList_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckModelInfoList_NFMsgShare_2eproto}, {
      &scc_info_ModelInfoUnit_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckModelSwitch_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckModelSwitch_default_instance_;
    new (ptr) ::NFMsg::ReqAckModelSwitch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckModelSwitch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAckModelSwitch_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqAckModelSwitch_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqAckModelSync_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckModelSync_default_instance_;
    new (ptr) ::NFMsg::ReqAckModelSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckModelSync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckModelSync_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckModelSync_NFMsgShare_2eproto}, {
      &scc_info_ModelSyncUnit_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckModelTarget_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckModelTarget_default_instance_;
    new (ptr) ::NFMsg::ReqAckModelTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckModelTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckModelTarget_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckModelTarget_NFMsgShare_2eproto}, {
      &scc_info_ModelSyncUnit_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckModelView_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckModelView_default_instance_;
    new (ptr) ::NFMsg::ReqAckModelView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckModelView::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqAckModelView_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReqAckModelView_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_ModelViewSyncUnit_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckModelViewSync_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckModelViewSync_default_instance_;
    new (ptr) ::NFMsg::ReqAckModelViewSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckModelViewSync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckModelViewSync_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckModelViewSync_NFMsgShare_2eproto}, {
      &scc_info_ModelViewSyncUnit_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckPlayerChat_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerChat_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerChat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerChat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckPlayerChat_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckPlayerChat_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckPlayerPosSync_default_instance_;
    new (ptr) ::NFMsg::ReqAckPlayerPosSync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckPlayerPosSync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto}, {
      &scc_info_PosSyncUnit_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqAckSwapScene_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckSwapScene_default_instance_;
    new (ptr) ::NFMsg::ReqAckSwapScene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckSwapScene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqAckSwapScene_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqAckSwapScene_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqAckUseSkill_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqAckUseSkill_default_instance_;
    new (ptr) ::NFMsg::ReqAckUseSkill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqAckUseSkill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReqAckUseSkill_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReqAckUseSkill_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,
      &scc_info_EffectData_NFMsgShare_2eproto.base,}};

static void InitDefaultsscc_info_ReqEnterGameServer_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqEnterGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqEnterGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqEnterGameServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReqEnterGameServer_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReqEnterGameServer_NFMsgShare_2eproto}, {
      &scc_info_Ident_NFMsgBase_2eproto.base,}};

static void InitDefaultsscc_info_ReqHeartBeat_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqHeartBeat_default_instance_;
    new (ptr) ::NFMsg::ReqHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqHeartBeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqHeartBeat_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqHeartBeat_NFMsgShare_2eproto}, {}};

static void InitDefaultsscc_info_ReqLeaveGameServer_NFMsgShare_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_ReqLeaveGameServer_default_instance_;
    new (ptr) ::NFMsg::ReqLeaveGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::ReqLeaveGameServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqLeaveGameServer_NFMsgShare_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqLeaveGameServer_NFMsgShare_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_NFMsgShare_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_NFMsgShare_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_NFMsgShare_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_NFMsgShare_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, account_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, game_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqEnterGameServer, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckEnterGameSuccess, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqHeartBeat, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqLeaveGameServer, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, object_guid_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, x_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, y_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, z_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, career_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, player_state_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, config_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, scene_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PlayerEntryInfo, class_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckPlayerEntryList, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::AckPlayerLeaveList, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PosSyncUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::PosSyncUnit, mover_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PosSyncUnit, pos_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PosSyncUnit, orientation_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PosSyncUnit, status_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::PosSyncUnit, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, sequence_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerPosSync, sync_unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::EffectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::EffectData, effect_ident_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::EffectData, effect_value_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::EffectData, effect_rlt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, user_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, skill_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, client_index_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, server_index_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckUseSkill, effect_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, transfer_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, scene_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, line_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, x_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, y_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, z_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckSwapScene, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, player_name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_channel_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckPlayerChat, chat_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelSyncUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelSyncUnit, raw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSync, sequence_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSync, sync_unit_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSync, msg_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSync, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelInfoUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelInfoUnit, name_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelInfoUnit, note_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelInfoList, client_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelInfoList, msg_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelInfoList, num_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelInfoList, cur_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelInfoList, info_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelTarget, client_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelTarget, msg_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelTarget, tar_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelTarget, level_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelTarget, sync_unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSwitch, client_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSwitch, msg_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelSwitch, tar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelViewSyncUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelViewSyncUnit, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelViewSyncUnit, player_type_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelViewSyncUnit, camera_pos_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelViewSyncUnit, camera_rot_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelViewSyncUnit, model_pos_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelViewSyncUnit, model_rot_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ModelViewSyncUnit, model_scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelViewSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelViewSync, sequence_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelViewSync, sync_unit_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelViewSync, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelView, player_id_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelView, sync_unit_),
  PROTOBUF_FIELD_OFFSET(::NFMsg::ReqAckModelView, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::ReqEnterGameServer)},
  { 9, -1, sizeof(::NFMsg::ReqAckEnterGameSuccess)},
  { 15, -1, sizeof(::NFMsg::ReqHeartBeat)},
  { 21, -1, sizeof(::NFMsg::ReqLeaveGameServer)},
  { 27, -1, sizeof(::NFMsg::PlayerEntryInfo)},
  { 41, -1, sizeof(::NFMsg::AckPlayerEntryList)},
  { 47, -1, sizeof(::NFMsg::AckPlayerLeaveList)},
  { 53, -1, sizeof(::NFMsg::PosSyncUnit)},
  { 63, -1, sizeof(::NFMsg::ReqAckPlayerPosSync)},
  { 70, -1, sizeof(::NFMsg::EffectData)},
  { 78, -1, sizeof(::NFMsg::ReqAckUseSkill)},
  { 88, -1, sizeof(::NFMsg::ReqAckSwapScene)},
  { 100, -1, sizeof(::NFMsg::ReqAckPlayerChat)},
  { 110, -1, sizeof(::NFMsg::ModelSyncUnit)},
  { 116, -1, sizeof(::NFMsg::ReqAckModelSync)},
  { 125, -1, sizeof(::NFMsg::ModelInfoUnit)},
  { 132, -1, sizeof(::NFMsg::ReqAckModelInfoList)},
  { 142, -1, sizeof(::NFMsg::ReqAckModelTarget)},
  { 152, -1, sizeof(::NFMsg::ReqAckModelSwitch)},
  { 160, -1, sizeof(::NFMsg::ModelViewSyncUnit)},
  { 172, -1, sizeof(::NFMsg::ReqAckModelViewSync)},
  { 180, -1, sizeof(::NFMsg::ReqAckModelView)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqEnterGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckEnterGameSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PlayerEntryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckPlayerEntryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_AckPlayerLeaveList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_PosSyncUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckPlayerPosSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_EffectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckUseSkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckSwapScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckPlayerChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ModelSyncUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckModelSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ModelInfoUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckModelInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckModelTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckModelSwitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ModelViewSyncUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckModelViewSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NFMsg::_ReqAckModelView_default_instance_),
};

const char descriptor_table_protodef_NFMsgShare_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020NFMsgShare.proto\022\005NFMsg\032\016NFDefine.prot"
  "o\032\017NFMsgBase.proto\"^\n\022ReqEnterGameServer"
  "\022\030\n\002id\030\001 \001(\0132\014.NFMsg.Ident\022\017\n\007account\030\002 "
  "\001(\014\022\017\n\007game_id\030\003 \001(\005\022\014\n\004name\030\004 \001(\014\"%\n\026Re"
  "qAckEnterGameSuccess\022\013\n\003arg\030\001 \001(\005\"\033\n\014Req"
  "HeartBeat\022\013\n\003arg\030\001 \001(\005\"!\n\022ReqLeaveGameSe"
  "rver\022\013\n\003arg\030\001 \001(\005\"\267\001\n\017PlayerEntryInfo\022!\n"
  "\013object_guid\030\001 \001(\0132\014.NFMsg.Ident\022\t\n\001x\030\002 "
  "\001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\023\n\013career_type"
  "\030\005 \001(\005\022\024\n\014player_state\030\006 \001(\005\022\021\n\tconfig_i"
  "d\030\007 \001(\014\022\020\n\010scene_id\030\010 \001(\005\022\020\n\010class_id\030\t "
  "\001(\014\"A\n\022AckPlayerEntryList\022+\n\013object_list"
  "\030\001 \003(\0132\026.NFMsg.PlayerEntryInfo\"7\n\022AckPla"
  "yerLeaveList\022!\n\013object_list\030\001 \003(\0132\014.NFMs"
  "g.Ident\"\345\001\n\013PosSyncUnit\022\033\n\005mover\030\001 \001(\0132\014"
  ".NFMsg.Ident\022\033\n\003pos\030\002 \001(\0132\016.NFMsg.Vector"
  "3\022#\n\013orientation\030\003 \001(\0132\016.NFMsg.Vector3\022\016"
  "\n\006status\030\004 \001(\005\022*\n\004type\030\005 \001(\0162\034.NFMsg.Pos"
  "SyncUnit.EMoveType\";\n\tEMoveType\022\014\n\010EMT_W"
  "ALK\020\000\022\016\n\nEET_SPEEDY\020\001\022\020\n\014EET_TELEPORT\020\002\""
  "N\n\023ReqAckPlayerPosSync\022\020\n\010sequence\030\001 \001(\005"
  "\022%\n\tsync_unit\030\002 \003(\0132\022.NFMsg.PosSyncUnit\""
  "\341\001\n\nEffectData\022\"\n\014effect_ident\030\001 \001(\0132\014.N"
  "FMsg.Ident\022\024\n\014effect_value\030\002 \001(\005\0221\n\neffe"
  "ct_rlt\030\003 \001(\0162\035.NFMsg.EffectData.EResultT"
  "ype\"f\n\013EResultType\022\014\n\010EET_FAIL\020\000\022\017\n\013EET_"
  "SUCCESS\020\001\022\016\n\nEET_REFUSE\020\002\022\014\n\010EET_MISS\020\003\022"
  "\014\n\010EET_CRIT\020\004\022\014\n\010EET_ULTI\020\005\"\222\001\n\016ReqAckUs"
  "eSkill\022\032\n\004user\030\001 \001(\0132\014.NFMsg.Ident\022\020\n\010sk"
  "ill_id\030\002 \001(\014\022\024\n\014client_index\030\003 \001(\005\022\024\n\014se"
  "rver_index\030\004 \001(\003\022&\n\013effect_data\030\005 \003(\0132\021."
  "NFMsg.EffectData\"z\n\017ReqAckSwapScene\022\025\n\rt"
  "ransfer_type\030\001 \001(\005\022\020\n\010scene_id\030\002 \001(\005\022\017\n\007"
  "line_id\030\003 \001(\005\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z"
  "\030\006 \001(\002\022\014\n\004data\030\007 \001(\014\"\347\002\n\020ReqAckPlayerCha"
  "t\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Ident\022\023\n\013pl"
  "ayer_name\030\002 \001(\014\022>\n\014chat_channel\030\003 \001(\0162(."
  "NFMsg.ReqAckPlayerChat.EGameChatChannel\022"
  "8\n\tchat_type\030\004 \001(\0162%.NFMsg.ReqAckPlayerC"
  "hat.EGameChatType\022\021\n\tchat_info\030\005 \001(\014\"P\n\020"
  "EGameChatChannel\022\017\n\013EGCC_GLOBAL\020\000\022\r\n\tEGC"
  "C_CLAN\020\001\022\r\n\tEGCC_ROOM\020\002\022\r\n\tEGCC_TEAM\020\003\">"
  "\n\rEGameChatType\022\r\n\tEGCT_TEXT\020\000\022\016\n\nEGCT_V"
  "OICE\020\001\022\016\n\nEGCT_EMOJI\020\002\"\034\n\rModelSyncUnit\022"
  "\013\n\003raw\030\001 \001(\014\"g\n\017ReqAckModelSync\022\020\n\010seque"
  "nce\030\001 \001(\005\022\'\n\tsync_unit\030\002 \001(\0132\024.NFMsg.Mod"
  "elSyncUnit\022\013\n\003msg\030\003 \001(\014\022\014\n\004name\030\004 \001(\014\"+\n"
  "\rModelInfoUnit\022\014\n\004name\030\001 \001(\014\022\014\n\004note\030\002 \001"
  "(\014\"u\n\023ReqAckModelInfoList\022\016\n\006client\030\001 \001("
  "\005\022\013\n\003msg\030\002 \001(\014\022\013\n\003num\030\003 \001(\005\022\013\n\003cur\030\004 \001(\005"
  "\022\'\n\tinfo_list\030\005 \003(\0132\024.NFMsg.ModelInfoUni"
  "t\"u\n\021ReqAckModelTarget\022\016\n\006client\030\001 \001(\005\022\013"
  "\n\003msg\030\002 \001(\014\022\013\n\003tar\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022"
  "\'\n\tsync_unit\030\005 \001(\0132\024.NFMsg.ModelSyncUnit"
  "\"=\n\021ReqAckModelSwitch\022\016\n\006client\030\001 \001(\005\022\013\n"
  "\003msg\030\002 \001(\014\022\013\n\003tar\030\003 \001(\005\"\331\002\n\021ModelViewSyn"
  "cUnit\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Ident\022="
  "\n\013player_type\030\002 \001(\0162(.NFMsg.ModelViewSyn"
  "cUnit.EViewPlayerType\022\"\n\ncamera_pos\030\003 \001("
  "\0132\016.NFMsg.Vector3\022\"\n\ncamera_rot\030\004 \001(\0132\016."
  "NFMsg.Vector3\022!\n\tmodel_pos\030\005 \001(\0132\016.NFMsg"
  ".Vector3\022!\n\tmodel_rot\030\006 \001(\0132\016.NFMsg.Vect"
  "or3\022#\n\013model_scale\030\007 \001(\0132\016.NFMsg.Vector3"
  "\"1\n\017EViewPlayerType\022\013\n\007EVST_PC\020\000\022\021\n\rEVST"
  "_HOLOLENS\020\001\"a\n\023ReqAckModelViewSync\022\020\n\010se"
  "quence\030\001 \001(\005\022+\n\tsync_unit\030\002 \001(\0132\030.NFMsg."
  "ModelViewSyncUnit\022\013\n\003msg\030\003 \001(\014\"l\n\017ReqAck"
  "ModelView\022\037\n\tplayer_id\030\001 \001(\0132\014.NFMsg.Ide"
  "nt\022+\n\tsync_unit\030\002 \003(\0132\030.NFMsg.ModelViewS"
  "yncUnit\022\013\n\003msg\030\003 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_NFMsgShare_2eproto_deps[2] = {
  &::descriptor_table_NFDefine_2eproto,
  &::descriptor_table_NFMsgBase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_NFMsgShare_2eproto_sccs[22] = {
  &scc_info_AckPlayerEntryList_NFMsgShare_2eproto.base,
  &scc_info_AckPlayerLeaveList_NFMsgShare_2eproto.base,
  &scc_info_EffectData_NFMsgShare_2eproto.base,
  &scc_info_ModelInfoUnit_NFMsgShare_2eproto.base,
  &scc_info_ModelSyncUnit_NFMsgShare_2eproto.base,
  &scc_info_ModelViewSyncUnit_NFMsgShare_2eproto.base,
  &scc_info_PlayerEntryInfo_NFMsgShare_2eproto.base,
  &scc_info_PosSyncUnit_NFMsgShare_2eproto.base,
  &scc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto.base,
  &scc_info_ReqAckModelInfoList_NFMsgShare_2eproto.base,
  &scc_info_ReqAckModelSwitch_NFMsgShare_2eproto.base,
  &scc_info_ReqAckModelSync_NFMsgShare_2eproto.base,
  &scc_info_ReqAckModelTarget_NFMsgShare_2eproto.base,
  &scc_info_ReqAckModelView_NFMsgShare_2eproto.base,
  &scc_info_ReqAckModelViewSync_NFMsgShare_2eproto.base,
  &scc_info_ReqAckPlayerChat_NFMsgShare_2eproto.base,
  &scc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto.base,
  &scc_info_ReqAckSwapScene_NFMsgShare_2eproto.base,
  &scc_info_ReqAckUseSkill_NFMsgShare_2eproto.base,
  &scc_info_ReqEnterGameServer_NFMsgShare_2eproto.base,
  &scc_info_ReqHeartBeat_NFMsgShare_2eproto.base,
  &scc_info_ReqLeaveGameServer_NFMsgShare_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_NFMsgShare_2eproto_once;
static bool descriptor_table_NFMsgShare_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgShare_2eproto = {
  &descriptor_table_NFMsgShare_2eproto_initialized, descriptor_table_protodef_NFMsgShare_2eproto, "NFMsgShare.proto", 2788,
  &descriptor_table_NFMsgShare_2eproto_once, descriptor_table_NFMsgShare_2eproto_sccs, descriptor_table_NFMsgShare_2eproto_deps, 22, 2,
  schemas, file_default_instances, TableStruct_NFMsgShare_2eproto::offsets,
  file_level_metadata_NFMsgShare_2eproto, 22, file_level_enum_descriptors_NFMsgShare_2eproto, file_level_service_descriptors_NFMsgShare_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_NFMsgShare_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_NFMsgShare_2eproto), true);
namespace NFMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosSyncUnit_EMoveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[0];
}
bool PosSyncUnit_EMoveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMT_WALK;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EET_SPEEDY;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EET_TELEPORT;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMoveType_MIN;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMoveType_MAX;
constexpr int PosSyncUnit::EMoveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectData_EResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[1];
}
bool EffectData_EResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EffectData_EResultType EffectData::EET_FAIL;
constexpr EffectData_EResultType EffectData::EET_SUCCESS;
constexpr EffectData_EResultType EffectData::EET_REFUSE;
constexpr EffectData_EResultType EffectData::EET_MISS;
constexpr EffectData_EResultType EffectData::EET_CRIT;
constexpr EffectData_EResultType EffectData::EET_ULTI;
constexpr EffectData_EResultType EffectData::EResultType_MIN;
constexpr EffectData_EResultType EffectData::EResultType_MAX;
constexpr int EffectData::EResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[2];
}
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_GLOBAL;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_CLAN;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_ROOM;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_TEAM;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MIN;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MAX;
constexpr int ReqAckPlayerChat::EGameChatChannel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[3];
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEXT;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_VOICE;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_EMOJI;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
constexpr int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelViewSyncUnit_EViewPlayerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_NFMsgShare_2eproto);
  return file_level_enum_descriptors_NFMsgShare_2eproto[4];
}
bool ModelViewSyncUnit_EViewPlayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ModelViewSyncUnit_EViewPlayerType ModelViewSyncUnit::EVST_PC;
constexpr ModelViewSyncUnit_EViewPlayerType ModelViewSyncUnit::EVST_HOLOLENS;
constexpr ModelViewSyncUnit_EViewPlayerType ModelViewSyncUnit::EViewPlayerType_MIN;
constexpr ModelViewSyncUnit_EViewPlayerType ModelViewSyncUnit::EViewPlayerType_MAX;
constexpr int ModelViewSyncUnit::EViewPlayerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ReqEnterGameServer::InitAsDefaultInstance() {
  ::NFMsg::_ReqEnterGameServer_default_instance_._instance.get_mutable()->id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqEnterGameServer::_Internal {
 public:
  static const ::NFMsg::Ident& id(const ReqEnterGameServer* msg);
};

const ::NFMsg::Ident&
ReqEnterGameServer::_Internal::id(const ReqEnterGameServer* msg) {
  return *msg->id_;
}
void ReqEnterGameServer::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ReqEnterGameServer::ReqEnterGameServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqEnterGameServer)
}
ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_id()) {
    id_ = new ::NFMsg::Ident(*from.id_);
  } else {
    id_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqEnterGameServer_NFMsgShare_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(game_id_));
}

ReqEnterGameServer::~ReqEnterGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqEnterGameServer)
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqEnterGameServer_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqEnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqEnterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  game_id_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqEnterGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEnterGameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqEnterGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::id(this), target, stream);
  }

  // bytes account = 2;
  if (this->account().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_account(), target);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_game_id(), target);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqEnterGameServer)
  return target;
}

size_t ReqEnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqEnterGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .NFMsg.Ident id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // int32 game_id = 3;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEnterGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEnterGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqEnterGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqEnterGameServer)
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqEnterGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_id()) {
    _internal_mutable_id()->::NFMsg::Ident::MergeFrom(from._internal_id());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void ReqEnterGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  return true;
}

void ReqEnterGameServer::InternalSwap(ReqEnterGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEnterGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckEnterGameSuccess::InitAsDefaultInstance() {
}
class ReqAckEnterGameSuccess::_Internal {
 public:
};

ReqAckEnterGameSuccess::ReqAckEnterGameSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckEnterGameSuccess)
}
ReqAckEnterGameSuccess::ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckEnterGameSuccess)
}

void ReqAckEnterGameSuccess::SharedCtor() {
  arg_ = 0;
}

ReqAckEnterGameSuccess::~ReqAckEnterGameSuccess() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckEnterGameSuccess)
  SharedDtor();
}

void ReqAckEnterGameSuccess::SharedDtor() {
}

void ReqAckEnterGameSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckEnterGameSuccess& ReqAckEnterGameSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckEnterGameSuccess_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckEnterGameSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckEnterGameSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckEnterGameSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckEnterGameSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckEnterGameSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckEnterGameSuccess)
  return target;
}

size_t ReqAckEnterGameSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckEnterGameSuccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckEnterGameSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckEnterGameSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckEnterGameSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckEnterGameSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckEnterGameSuccess)
    MergeFrom(*source);
  }
}

void ReqAckEnterGameSuccess::MergeFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckEnterGameSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    _internal_set_arg(from._internal_arg());
  }
}

void ReqAckEnterGameSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEnterGameSuccess::CopyFrom(const ReqAckEnterGameSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckEnterGameSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEnterGameSuccess::IsInitialized() const {
  return true;
}

void ReqAckEnterGameSuccess::InternalSwap(ReqAckEnterGameSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(arg_, other->arg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckEnterGameSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqHeartBeat::InitAsDefaultInstance() {
}
class ReqHeartBeat::_Internal {
 public:
};

ReqHeartBeat::ReqHeartBeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqHeartBeat)
}
ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqHeartBeat)
}

void ReqHeartBeat::SharedCtor() {
  arg_ = 0;
}

ReqHeartBeat::~ReqHeartBeat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqHeartBeat)
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
}

void ReqHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqHeartBeat& ReqHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqHeartBeat_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqHeartBeat)
  return target;
}

size_t ReqHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqHeartBeat)
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    _internal_set_arg(from._internal_arg());
  }
}

void ReqHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {
  return true;
}

void ReqHeartBeat::InternalSwap(ReqHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(arg_, other->arg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqLeaveGameServer::InitAsDefaultInstance() {
}
class ReqLeaveGameServer::_Internal {
 public:
};

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arg_ = from.arg_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
  arg_ = 0;
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqLeaveGameServer)
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqLeaveGameServer_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqLeaveGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 arg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          arg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLeaveGameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_arg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 arg = 1;
  if (this->arg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_arg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLeaveGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqLeaveGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arg() != 0) {
    _internal_set_arg(from._internal_arg());
  }
}

void ReqLeaveGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(arg_, other->arg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLeaveGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerEntryInfo::InitAsDefaultInstance() {
  ::NFMsg::_PlayerEntryInfo_default_instance_._instance.get_mutable()->object_guid_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class PlayerEntryInfo::_Internal {
 public:
  static const ::NFMsg::Ident& object_guid(const PlayerEntryInfo* msg);
};

const ::NFMsg::Ident&
PlayerEntryInfo::_Internal::object_guid(const PlayerEntryInfo* msg) {
  return *msg->object_guid_;
}
void PlayerEntryInfo::clear_object_guid() {
  if (GetArenaNoVirtual() == nullptr && object_guid_ != nullptr) {
    delete object_guid_;
  }
  object_guid_ = nullptr;
}
PlayerEntryInfo::PlayerEntryInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PlayerEntryInfo)
}
PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_id().empty()) {
    class_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from._internal_has_object_guid()) {
    object_guid_ = new ::NFMsg::Ident(*from.object_guid_);
  } else {
    object_guid_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayerEntryInfo_NFMsgShare_2eproto.base);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&object_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&object_guid_)) + sizeof(scene_id_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PlayerEntryInfo)
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_guid_;
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerEntryInfo_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PlayerEntryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && object_guid_ != nullptr) {
    delete object_guid_;
  }
  object_guid_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&x_)) + sizeof(scene_id_));
  _internal_metadata_.Clear();
}

const char* PlayerEntryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident object_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 career_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          career_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 player_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          player_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes config_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes class_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_class_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerEntryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PlayerEntryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object_guid(this), target, stream);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_career_type(), target);
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_player_state(), target);
  }

  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_config_id(), target);
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_scene_id(), target);
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_class_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PlayerEntryInfo)
  return target;
}

size_t PlayerEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PlayerEntryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes config_id = 7;
  if (this->config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_id());
  }

  // bytes class_id = 9;
  if (this->class_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_class_id());
  }

  // .NFMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_guid_);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 career_type = 5;
  if (this->career_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_career_type());
  }

  // int32 player_state = 6;
  if (this->player_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_state());
  }

  // int32 scene_id = 8;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerEntryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PlayerEntryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id().size() > 0) {

    config_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.config_id_);
  }
  if (from.class_id().size() > 0) {

    class_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class_id_);
  }
  if (from.has_object_guid()) {
    _internal_mutable_object_guid()->::NFMsg::Ident::MergeFrom(from._internal_object_guid());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from.career_type() != 0) {
    _internal_set_career_type(from._internal_career_type());
  }
  if (from.player_state() != 0) {
    _internal_set_player_state(from._internal_player_state());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void PlayerEntryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  return true;
}

void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  config_id_.Swap(&other->config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  class_id_.Swap(&other->class_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(object_guid_, other->object_guid_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(career_type_, other->career_type_);
  swap(player_state_, other->player_state_);
  swap(scene_id_, other->scene_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerEntryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckPlayerEntryList::InitAsDefaultInstance() {
}
class AckPlayerEntryList::_Internal {
 public:
};

AckPlayerEntryList::AckPlayerEntryList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerEntryList)
}
AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckPlayerEntryList_NFMsgShare_2eproto.base);
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerEntryList)
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckPlayerEntryList_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerEntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

const char* AckPlayerEntryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.PlayerEntryInfo object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerEntryList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerEntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerEntryList)
  return target;
}

size_t AckPlayerEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerEntryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerEntryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerEntryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerEntryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerEntryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {
  return true;
}

void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerEntryList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckPlayerLeaveList::InitAsDefaultInstance() {
}
class AckPlayerLeaveList::_Internal {
 public:
};

void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
AckPlayerLeaveList::AckPlayerLeaveList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.AckPlayerLeaveList)
}
AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NFMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckPlayerLeaveList_NFMsgShare_2eproto.base);
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:NFMsg.AckPlayerLeaveList)
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckPlayerLeaveList_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.AckPlayerLeaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear();
}

const char* AckPlayerLeaveList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NFMsg.Ident object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerLeaveList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.AckPlayerLeaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.AckPlayerLeaveList)
  return target;
}

size_t AckPlayerLeaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.AckPlayerLeaveList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.Ident object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerLeaveList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.AckPlayerLeaveList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerLeaveList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {
  return true;
}

void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerLeaveList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PosSyncUnit::InitAsDefaultInstance() {
  ::NFMsg::_PosSyncUnit_default_instance_._instance.get_mutable()->mover_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_PosSyncUnit_default_instance_._instance.get_mutable()->pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_PosSyncUnit_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
class PosSyncUnit::_Internal {
 public:
  static const ::NFMsg::Ident& mover(const PosSyncUnit* msg);
  static const ::NFMsg::Vector3& pos(const PosSyncUnit* msg);
  static const ::NFMsg::Vector3& orientation(const PosSyncUnit* msg);
};

const ::NFMsg::Ident&
PosSyncUnit::_Internal::mover(const PosSyncUnit* msg) {
  return *msg->mover_;
}
const ::NFMsg::Vector3&
PosSyncUnit::_Internal::pos(const PosSyncUnit* msg) {
  return *msg->pos_;
}
const ::NFMsg::Vector3&
PosSyncUnit::_Internal::orientation(const PosSyncUnit* msg) {
  return *msg->orientation_;
}
void PosSyncUnit::clear_mover() {
  if (GetArenaNoVirtual() == nullptr && mover_ != nullptr) {
    delete mover_;
  }
  mover_ = nullptr;
}
void PosSyncUnit::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void PosSyncUnit::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
PosSyncUnit::PosSyncUnit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PosSyncUnit)
}
PosSyncUnit::PosSyncUnit(const PosSyncUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_mover()) {
    mover_ = new ::NFMsg::Ident(*from.mover_);
  } else {
    mover_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::NFMsg::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::NFMsg::Vector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PosSyncUnit)
}

void PosSyncUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PosSyncUnit_NFMsgShare_2eproto.base);
  ::memset(&mover_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&mover_)) + sizeof(type_));
}

PosSyncUnit::~PosSyncUnit() {
  // @@protoc_insertion_point(destructor:NFMsg.PosSyncUnit)
  SharedDtor();
}

void PosSyncUnit::SharedDtor() {
  if (this != internal_default_instance()) delete mover_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete orientation_;
}

void PosSyncUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PosSyncUnit& PosSyncUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PosSyncUnit_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void PosSyncUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PosSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && mover_ != nullptr) {
    delete mover_;
  }
  mover_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* PosSyncUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident mover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mover(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.PosSyncUnit.EMoveType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::NFMsg::PosSyncUnit_EMoveType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosSyncUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PosSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mover(this), target, stream);
  }

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // .NFMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // .NFMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PosSyncUnit)
  return target;
}

size_t PosSyncUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PosSyncUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident mover = 1;
  if (this->has_mover()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mover_);
  }

  // .NFMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .NFMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // .NFMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosSyncUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PosSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const PosSyncUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosSyncUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PosSyncUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PosSyncUnit)
    MergeFrom(*source);
  }
}

void PosSyncUnit::MergeFrom(const PosSyncUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PosSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mover()) {
    _internal_mutable_mover()->::NFMsg::Ident::MergeFrom(from._internal_mover());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::NFMsg::Vector3::MergeFrom(from._internal_pos());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::NFMsg::Vector3::MergeFrom(from._internal_orientation());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PosSyncUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PosSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosSyncUnit::CopyFrom(const PosSyncUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PosSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosSyncUnit::IsInitialized() const {
  return true;
}

void PosSyncUnit::InternalSwap(PosSyncUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(mover_, other->mover_);
  swap(pos_, other->pos_);
  swap(orientation_, other->orientation_);
  swap(status_, other->status_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PosSyncUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckPlayerPosSync::InitAsDefaultInstance() {
}
class ReqAckPlayerPosSync::_Internal {
 public:
};

ReqAckPlayerPosSync::ReqAckPlayerPosSync()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerPosSync)
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sync_unit_(from.sync_unit_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerPosSync)
}

void ReqAckPlayerPosSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto.base);
  sequence_ = 0;
}

ReqAckPlayerPosSync::~ReqAckPlayerPosSync() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerPosSync)
  SharedDtor();
}

void ReqAckPlayerPosSync::SharedDtor() {
}

void ReqAckPlayerPosSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckPlayerPosSync& ReqAckPlayerPosSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckPlayerPosSync_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckPlayerPosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerPosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sync_unit_.Clear();
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckPlayerPosSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.PosSyncUnit sync_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sync_unit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerPosSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerPosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence(), target);
  }

  // repeated .NFMsg.PosSyncUnit sync_unit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sync_unit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sync_unit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerPosSync)
  return target;
}

size_t ReqAckPlayerPosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerPosSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.PosSyncUnit sync_unit = 2;
  total_size += 1UL * this->_internal_sync_unit_size();
  for (const auto& msg : this->sync_unit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerPosSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerPosSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerPosSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerPosSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerPosSync)
    MergeFrom(*source);
  }
}

void ReqAckPlayerPosSync::MergeFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sync_unit_.MergeFrom(from.sync_unit_);
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void ReqAckPlayerPosSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerPosSync::CopyFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerPosSync::IsInitialized() const {
  return true;
}

void ReqAckPlayerPosSync::InternalSwap(ReqAckPlayerPosSync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sync_unit_.InternalSwap(&other->sync_unit_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerPosSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EffectData::InitAsDefaultInstance() {
  ::NFMsg::_EffectData_default_instance_._instance.get_mutable()->effect_ident_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class EffectData::_Internal {
 public:
  static const ::NFMsg::Ident& effect_ident(const EffectData* msg);
};

const ::NFMsg::Ident&
EffectData::_Internal::effect_ident(const EffectData* msg) {
  return *msg->effect_ident_;
}
void EffectData::clear_effect_ident() {
  if (GetArenaNoVirtual() == nullptr && effect_ident_ != nullptr) {
    delete effect_ident_;
  }
  effect_ident_ = nullptr;
}
EffectData::EffectData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.EffectData)
}
EffectData::EffectData(const EffectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_effect_ident()) {
    effect_ident_ = new ::NFMsg::Ident(*from.effect_ident_);
  } else {
    effect_ident_ = nullptr;
  }
  ::memcpy(&effect_value_, &from.effect_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_rlt_) -
    reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.EffectData)
}

void EffectData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EffectData_NFMsgShare_2eproto.base);
  ::memset(&effect_ident_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_ident_)) + sizeof(effect_rlt_));
}

EffectData::~EffectData() {
  // @@protoc_insertion_point(destructor:NFMsg.EffectData)
  SharedDtor();
}

void EffectData::SharedDtor() {
  if (this != internal_default_instance()) delete effect_ident_;
}

void EffectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EffectData& EffectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EffectData_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void EffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.EffectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && effect_ident_ != nullptr) {
    delete effect_ident_;
  }
  effect_ident_ = nullptr;
  ::memset(&effect_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_rlt_) -
      reinterpret_cast<char*>(&effect_value_)) + sizeof(effect_rlt_));
  _internal_metadata_.Clear();
}

const char* EffectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident effect_ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_effect_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 effect_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          effect_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.EffectData.EResultType effect_rlt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_effect_rlt(static_cast<::NFMsg::EffectData_EResultType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EffectData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.EffectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::effect_ident(this), target, stream);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_effect_value(), target);
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_effect_rlt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.EffectData)
  return target;
}

size_t EffectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.EffectData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident effect_ident = 1;
  if (this->has_effect_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *effect_ident_);
  }

  // int32 effect_value = 2;
  if (this->effect_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_effect_value());
  }

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  if (this->effect_rlt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_effect_rlt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EffectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  const EffectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EffectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.EffectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.EffectData)
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.EffectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_effect_ident()) {
    _internal_mutable_effect_ident()->::NFMsg::Ident::MergeFrom(from._internal_effect_ident());
  }
  if (from.effect_value() != 0) {
    _internal_set_effect_value(from._internal_effect_value());
  }
  if (from.effect_rlt() != 0) {
    _internal_set_effect_rlt(from._internal_effect_rlt());
  }
}

void EffectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  return true;
}

void EffectData::InternalSwap(EffectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(effect_ident_, other->effect_ident_);
  swap(effect_value_, other->effect_value_);
  swap(effect_rlt_, other->effect_rlt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EffectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckUseSkill::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckUseSkill_default_instance_._instance.get_mutable()->user_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckUseSkill::_Internal {
 public:
  static const ::NFMsg::Ident& user(const ReqAckUseSkill* msg);
};

const ::NFMsg::Ident&
ReqAckUseSkill::_Internal::user(const ReqAckUseSkill* msg) {
  return *msg->user_;
}
void ReqAckUseSkill::clear_user() {
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
ReqAckUseSkill::ReqAckUseSkill()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckUseSkill)
}
ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      effect_data_(from.effect_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_skill_id().empty()) {
    skill_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from._internal_has_user()) {
    user_ = new ::NFMsg::Ident(*from.user_);
  } else {
    user_ = nullptr;
  }
  ::memcpy(&server_index_, &from.server_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_index_) -
    reinterpret_cast<char*>(&server_index_)) + sizeof(client_index_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckUseSkill)
}

void ReqAckUseSkill::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckUseSkill_NFMsgShare_2eproto.base);
  skill_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_index_) -
      reinterpret_cast<char*>(&user_)) + sizeof(client_index_));
}

ReqAckUseSkill::~ReqAckUseSkill() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckUseSkill)
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  skill_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_;
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckUseSkill_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckUseSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  effect_data_.Clear();
  skill_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  ::memset(&server_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_index_) -
      reinterpret_cast<char*>(&server_index_)) + sizeof(client_index_));
  _internal_metadata_.Clear();
}

const char* ReqAckUseSkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes skill_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_skill_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 client_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          client_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 server_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          server_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.EffectData effect_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_effect_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckUseSkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckUseSkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_skill_id(), target);
  }

  // int32 client_index = 3;
  if (this->client_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_index(), target);
  }

  // int64 server_index = 4;
  if (this->server_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_server_index(), target);
  }

  // repeated .NFMsg.EffectData effect_data = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_effect_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_effect_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckUseSkill)
  return target;
}

size_t ReqAckUseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckUseSkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.EffectData effect_data = 5;
  total_size += 1UL * this->_internal_effect_data_size();
  for (const auto& msg : this->effect_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes skill_id = 2;
  if (this->skill_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_skill_id());
  }

  // .NFMsg.Ident user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  // int64 server_index = 4;
  if (this->server_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_server_index());
  }

  // int32 client_index = 3;
  if (this->client_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckUseSkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckUseSkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckUseSkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckUseSkill)
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  effect_data_.MergeFrom(from.effect_data_);
  if (from.skill_id().size() > 0) {

    skill_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
  }
  if (from.has_user()) {
    _internal_mutable_user()->::NFMsg::Ident::MergeFrom(from._internal_user());
  }
  if (from.server_index() != 0) {
    _internal_set_server_index(from._internal_server_index());
  }
  if (from.client_index() != 0) {
    _internal_set_client_index(from._internal_client_index());
  }
}

void ReqAckUseSkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  return true;
}

void ReqAckUseSkill::InternalSwap(ReqAckUseSkill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  effect_data_.InternalSwap(&other->effect_data_);
  skill_id_.Swap(&other->skill_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_, other->user_);
  swap(server_index_, other->server_index_);
  swap(client_index_, other->client_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckUseSkill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckSwapScene::InitAsDefaultInstance() {
}
class ReqAckSwapScene::_Internal {
 public:
};

ReqAckSwapScene::ReqAckSwapScene()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckSwapScene)
}
ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&transfer_type_, &from.transfer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckSwapScene)
}

void ReqAckSwapScene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckSwapScene_NFMsgShare_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
}

ReqAckSwapScene::~ReqAckSwapScene() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckSwapScene)
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckSwapScene_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&transfer_type_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

const char* ReqAckSwapScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 transfer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          transfer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          line_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckSwapScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 transfer_type = 1;
  if (this->transfer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_transfer_type(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_line_id(), target);
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_x(), target);
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_y(), target);
  }

  // float z = 6;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_z(), target);
  }

  // bytes data = 7;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckSwapScene)
  return target;
}

size_t ReqAckSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckSwapScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 7;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 transfer_type = 1;
  if (this->transfer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_transfer_type());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  // int32 line_id = 3;
  if (this->line_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_id());
  }

  // float x = 4;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 5;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 6;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckSwapScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckSwapScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckSwapScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckSwapScene)
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.transfer_type() != 0) {
    _internal_set_transfer_type(from._internal_transfer_type());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
  if (from.line_id() != 0) {
    _internal_set_line_id(from._internal_line_id());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void ReqAckSwapScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  return true;
}

void ReqAckSwapScene::InternalSwap(ReqAckSwapScene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transfer_type_, other->transfer_type_);
  swap(scene_id_, other->scene_id_);
  swap(line_id_, other->line_id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckSwapScene::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckPlayerChat::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckPlayerChat_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckPlayerChat::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ReqAckPlayerChat* msg);
};

const ::NFMsg::Ident&
ReqAckPlayerChat::_Internal::player_id(const ReqAckPlayerChat* msg) {
  return *msg->player_id_;
}
void ReqAckPlayerChat::clear_player_id() {
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqAckPlayerChat::ReqAckPlayerChat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckPlayerChat)
}
ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_name().empty()) {
    player_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  chat_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_info().empty()) {
    chat_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&chat_channel_, &from.chat_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckPlayerChat_NFMsgShare_2eproto.base);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(chat_type_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckPlayerChat)
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckPlayerChat_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckPlayerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&chat_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  _internal_metadata_.Clear();
}

const char* ReqAckPlayerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_chat_channel(static_cast<::NFMsg::ReqAckPlayerChat_EGameChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_chat_type(static_cast<::NFMsg::ReqAckPlayerChat_EGameChatType>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_chat_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckPlayerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes player_name = 2;
  if (this->player_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
  if (this->chat_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_chat_channel(), target);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
  if (this->chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_chat_type(), target);
  }

  // bytes chat_info = 5;
  if (this->chat_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_chat_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckPlayerChat)
  return target;
}

size_t ReqAckPlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes player_name = 2;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_player_name());
  }

  // bytes chat_info = 5;
  if (this->chat_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_info());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
  if (this->chat_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_channel());
  }

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckPlayerChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {

    player_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.chat_info().size() > 0) {

    chat_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.chat_channel() != 0) {
    _internal_set_chat_channel(from._internal_chat_channel());
  }
  if (from.chat_type() != 0) {
    _internal_set_chat_type(from._internal_chat_type());
  }
}

void ReqAckPlayerChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  return true;
}

void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chat_info_.Swap(&other->chat_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(chat_channel_, other->chat_channel_);
  swap(chat_type_, other->chat_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerChat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelSyncUnit::InitAsDefaultInstance() {
}
class ModelSyncUnit::_Internal {
 public:
};

ModelSyncUnit::ModelSyncUnit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ModelSyncUnit)
}
ModelSyncUnit::ModelSyncUnit(const ModelSyncUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw().empty()) {
    raw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ModelSyncUnit)
}

void ModelSyncUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelSyncUnit_NFMsgShare_2eproto.base);
  raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelSyncUnit::~ModelSyncUnit() {
  // @@protoc_insertion_point(destructor:NFMsg.ModelSyncUnit)
  SharedDtor();
}

void ModelSyncUnit::SharedDtor() {
  raw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelSyncUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelSyncUnit& ModelSyncUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelSyncUnit_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ModelSyncUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ModelSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ModelSyncUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelSyncUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ModelSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw = 1;
  if (this->raw().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ModelSyncUnit)
  return target;
}

size_t ModelSyncUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ModelSyncUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw = 1;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelSyncUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ModelSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelSyncUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelSyncUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ModelSyncUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ModelSyncUnit)
    MergeFrom(*source);
  }
}

void ModelSyncUnit::MergeFrom(const ModelSyncUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ModelSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
}

void ModelSyncUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ModelSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelSyncUnit::CopyFrom(const ModelSyncUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ModelSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelSyncUnit::IsInitialized() const {
  return true;
}

void ModelSyncUnit::InternalSwap(ModelSyncUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_.Swap(&other->raw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelSyncUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckModelSync::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckModelSync_default_instance_._instance.get_mutable()->sync_unit_ = const_cast< ::NFMsg::ModelSyncUnit*>(
      ::NFMsg::ModelSyncUnit::internal_default_instance());
}
class ReqAckModelSync::_Internal {
 public:
  static const ::NFMsg::ModelSyncUnit& sync_unit(const ReqAckModelSync* msg);
};

const ::NFMsg::ModelSyncUnit&
ReqAckModelSync::_Internal::sync_unit(const ReqAckModelSync* msg) {
  return *msg->sync_unit_;
}
ReqAckModelSync::ReqAckModelSync()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckModelSync)
}
ReqAckModelSync::ReqAckModelSync(const ReqAckModelSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from._internal_has_sync_unit()) {
    sync_unit_ = new ::NFMsg::ModelSyncUnit(*from.sync_unit_);
  } else {
    sync_unit_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckModelSync)
}

void ReqAckModelSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckModelSync_NFMsgShare_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sync_unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&sync_unit_)) + sizeof(sequence_));
}

ReqAckModelSync::~ReqAckModelSync() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckModelSync)
  SharedDtor();
}

void ReqAckModelSync::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sync_unit_;
}

void ReqAckModelSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckModelSync& ReqAckModelSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckModelSync_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckModelSync::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckModelSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckModelSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ModelSyncUnit sync_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckModelSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckModelSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence(), target);
  }

  // .NFMsg.ModelSyncUnit sync_unit = 2;
  if (this->has_sync_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sync_unit(this), target, stream);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg(), target);
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckModelSync)
  return target;
}

size_t ReqAckModelSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckModelSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // bytes name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .NFMsg.ModelSyncUnit sync_unit = 2;
  if (this->has_sync_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_unit_);
  }

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckModelSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckModelSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckModelSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckModelSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckModelSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckModelSync)
    MergeFrom(*source);
  }
}

void ReqAckModelSync::MergeFrom(const ReqAckModelSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckModelSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_sync_unit()) {
    _internal_mutable_sync_unit()->::NFMsg::ModelSyncUnit::MergeFrom(from._internal_sync_unit());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void ReqAckModelSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckModelSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckModelSync::CopyFrom(const ReqAckModelSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckModelSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckModelSync::IsInitialized() const {
  return true;
}

void ReqAckModelSync::InternalSwap(ReqAckModelSync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sync_unit_, other->sync_unit_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckModelSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelInfoUnit::InitAsDefaultInstance() {
}
class ModelInfoUnit::_Internal {
 public:
};

ModelInfoUnit::ModelInfoUnit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ModelInfoUnit)
}
ModelInfoUnit::ModelInfoUnit(const ModelInfoUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_note().empty()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ModelInfoUnit)
}

void ModelInfoUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelInfoUnit_NFMsgShare_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ModelInfoUnit::~ModelInfoUnit() {
  // @@protoc_insertion_point(destructor:NFMsg.ModelInfoUnit)
  SharedDtor();
}

void ModelInfoUnit::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModelInfoUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelInfoUnit& ModelInfoUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelInfoUnit_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ModelInfoUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ModelInfoUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ModelInfoUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes note = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_note();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelInfoUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ModelInfoUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes note = 2;
  if (this->note().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_note(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ModelInfoUnit)
  return target;
}

size_t ModelInfoUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ModelInfoUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes note = 2;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_note());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelInfoUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ModelInfoUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelInfoUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelInfoUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ModelInfoUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ModelInfoUnit)
    MergeFrom(*source);
  }
}

void ModelInfoUnit::MergeFrom(const ModelInfoUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ModelInfoUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.note().size() > 0) {

    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
}

void ModelInfoUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ModelInfoUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfoUnit::CopyFrom(const ModelInfoUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ModelInfoUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfoUnit::IsInitialized() const {
  return true;
}

void ModelInfoUnit::InternalSwap(ModelInfoUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelInfoUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckModelInfoList::InitAsDefaultInstance() {
}
class ReqAckModelInfoList::_Internal {
 public:
};

ReqAckModelInfoList::ReqAckModelInfoList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckModelInfoList)
}
ReqAckModelInfoList::ReqAckModelInfoList(const ReqAckModelInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      info_list_(from.info_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&client_, &from.client_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_) -
    reinterpret_cast<char*>(&client_)) + sizeof(cur_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckModelInfoList)
}

void ReqAckModelInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckModelInfoList_NFMsgShare_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_) -
      reinterpret_cast<char*>(&client_)) + sizeof(cur_));
}

ReqAckModelInfoList::~ReqAckModelInfoList() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckModelInfoList)
  SharedDtor();
}

void ReqAckModelInfoList::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAckModelInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckModelInfoList& ReqAckModelInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckModelInfoList_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckModelInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckModelInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  info_list_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_) -
      reinterpret_cast<char*>(&client_)) + sizeof(cur_));
  _internal_metadata_.Clear();
}

const char* ReqAckModelInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cur = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.ModelInfoUnit info_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_info_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckModelInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckModelInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client = 1;
  if (this->client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 num = 3;
  if (this->num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num(), target);
  }

  // int32 cur = 4;
  if (this->cur() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cur(), target);
  }

  // repeated .NFMsg.ModelInfoUnit info_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_info_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_info_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckModelInfoList)
  return target;
}

size_t ReqAckModelInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckModelInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.ModelInfoUnit info_list = 5;
  total_size += 1UL * this->_internal_info_list_size();
  for (const auto& msg : this->info_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 client = 1;
  if (this->client() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client());
  }

  // int32 num = 3;
  if (this->num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  // int32 cur = 4;
  if (this->cur() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckModelInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckModelInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckModelInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckModelInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckModelInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckModelInfoList)
    MergeFrom(*source);
  }
}

void ReqAckModelInfoList::MergeFrom(const ReqAckModelInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckModelInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  info_list_.MergeFrom(from.info_list_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.client() != 0) {
    _internal_set_client(from._internal_client());
  }
  if (from.num() != 0) {
    _internal_set_num(from._internal_num());
  }
  if (from.cur() != 0) {
    _internal_set_cur(from._internal_cur());
  }
}

void ReqAckModelInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckModelInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckModelInfoList::CopyFrom(const ReqAckModelInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckModelInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckModelInfoList::IsInitialized() const {
  return true;
}

void ReqAckModelInfoList::InternalSwap(ReqAckModelInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  info_list_.InternalSwap(&other->info_list_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_, other->client_);
  swap(num_, other->num_);
  swap(cur_, other->cur_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckModelInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckModelTarget::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckModelTarget_default_instance_._instance.get_mutable()->sync_unit_ = const_cast< ::NFMsg::ModelSyncUnit*>(
      ::NFMsg::ModelSyncUnit::internal_default_instance());
}
class ReqAckModelTarget::_Internal {
 public:
  static const ::NFMsg::ModelSyncUnit& sync_unit(const ReqAckModelTarget* msg);
};

const ::NFMsg::ModelSyncUnit&
ReqAckModelTarget::_Internal::sync_unit(const ReqAckModelTarget* msg) {
  return *msg->sync_unit_;
}
ReqAckModelTarget::ReqAckModelTarget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckModelTarget)
}
ReqAckModelTarget::ReqAckModelTarget(const ReqAckModelTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from._internal_has_sync_unit()) {
    sync_unit_ = new ::NFMsg::ModelSyncUnit(*from.sync_unit_);
  } else {
    sync_unit_ = nullptr;
  }
  ::memcpy(&client_, &from.client_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&client_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckModelTarget)
}

void ReqAckModelTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckModelTarget_NFMsgShare_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sync_unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&sync_unit_)) + sizeof(level_));
}

ReqAckModelTarget::~ReqAckModelTarget() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckModelTarget)
  SharedDtor();
}

void ReqAckModelTarget::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sync_unit_;
}

void ReqAckModelTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckModelTarget& ReqAckModelTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckModelTarget_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckModelTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckModelTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&client_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

const char* ReqAckModelTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ModelSyncUnit sync_unit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckModelTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckModelTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client = 1;
  if (this->client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 tar = 3;
  if (this->tar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tar(), target);
  }

  // int32 level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // .NFMsg.ModelSyncUnit sync_unit = 5;
  if (this->has_sync_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sync_unit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckModelTarget)
  return target;
}

size_t ReqAckModelTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckModelTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // .NFMsg.ModelSyncUnit sync_unit = 5;
  if (this->has_sync_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_unit_);
  }

  // int32 client = 1;
  if (this->client() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client());
  }

  // int32 tar = 3;
  if (this->tar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tar());
  }

  // int32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckModelTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckModelTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckModelTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckModelTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckModelTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckModelTarget)
    MergeFrom(*source);
  }
}

void ReqAckModelTarget::MergeFrom(const ReqAckModelTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckModelTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_sync_unit()) {
    _internal_mutable_sync_unit()->::NFMsg::ModelSyncUnit::MergeFrom(from._internal_sync_unit());
  }
  if (from.client() != 0) {
    _internal_set_client(from._internal_client());
  }
  if (from.tar() != 0) {
    _internal_set_tar(from._internal_tar());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
}

void ReqAckModelTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckModelTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckModelTarget::CopyFrom(const ReqAckModelTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckModelTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckModelTarget::IsInitialized() const {
  return true;
}

void ReqAckModelTarget::InternalSwap(ReqAckModelTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sync_unit_, other->sync_unit_);
  swap(client_, other->client_);
  swap(tar_, other->tar_);
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckModelTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckModelSwitch::InitAsDefaultInstance() {
}
class ReqAckModelSwitch::_Internal {
 public:
};

ReqAckModelSwitch::ReqAckModelSwitch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckModelSwitch)
}
ReqAckModelSwitch::ReqAckModelSwitch(const ReqAckModelSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&client_, &from.client_,
    static_cast<size_t>(reinterpret_cast<char*>(&tar_) -
    reinterpret_cast<char*>(&client_)) + sizeof(tar_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckModelSwitch)
}

void ReqAckModelSwitch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckModelSwitch_NFMsgShare_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tar_) -
      reinterpret_cast<char*>(&client_)) + sizeof(tar_));
}

ReqAckModelSwitch::~ReqAckModelSwitch() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckModelSwitch)
  SharedDtor();
}

void ReqAckModelSwitch::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqAckModelSwitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckModelSwitch& ReqAckModelSwitch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckModelSwitch_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckModelSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckModelSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tar_) -
      reinterpret_cast<char*>(&client_)) + sizeof(tar_));
  _internal_metadata_.Clear();
}

const char* ReqAckModelSwitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          client_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 tar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckModelSwitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckModelSwitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 client = 1;
  if (this->client() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_client(), target);
  }

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // int32 tar = 3;
  if (this->tar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckModelSwitch)
  return target;
}

size_t ReqAckModelSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckModelSwitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // int32 client = 1;
  if (this->client() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client());
  }

  // int32 tar = 3;
  if (this->tar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tar());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckModelSwitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckModelSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckModelSwitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckModelSwitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckModelSwitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckModelSwitch)
    MergeFrom(*source);
  }
}

void ReqAckModelSwitch::MergeFrom(const ReqAckModelSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckModelSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.client() != 0) {
    _internal_set_client(from._internal_client());
  }
  if (from.tar() != 0) {
    _internal_set_tar(from._internal_tar());
  }
}

void ReqAckModelSwitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckModelSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckModelSwitch::CopyFrom(const ReqAckModelSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckModelSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckModelSwitch::IsInitialized() const {
  return true;
}

void ReqAckModelSwitch::InternalSwap(ReqAckModelSwitch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_, other->client_);
  swap(tar_, other->tar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckModelSwitch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModelViewSyncUnit::InitAsDefaultInstance() {
  ::NFMsg::_ModelViewSyncUnit_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
  ::NFMsg::_ModelViewSyncUnit_default_instance_._instance.get_mutable()->camera_pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ModelViewSyncUnit_default_instance_._instance.get_mutable()->camera_rot_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ModelViewSyncUnit_default_instance_._instance.get_mutable()->model_pos_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ModelViewSyncUnit_default_instance_._instance.get_mutable()->model_rot_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
  ::NFMsg::_ModelViewSyncUnit_default_instance_._instance.get_mutable()->model_scale_ = const_cast< ::NFMsg::Vector3*>(
      ::NFMsg::Vector3::internal_default_instance());
}
class ModelViewSyncUnit::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ModelViewSyncUnit* msg);
  static const ::NFMsg::Vector3& camera_pos(const ModelViewSyncUnit* msg);
  static const ::NFMsg::Vector3& camera_rot(const ModelViewSyncUnit* msg);
  static const ::NFMsg::Vector3& model_pos(const ModelViewSyncUnit* msg);
  static const ::NFMsg::Vector3& model_rot(const ModelViewSyncUnit* msg);
  static const ::NFMsg::Vector3& model_scale(const ModelViewSyncUnit* msg);
};

const ::NFMsg::Ident&
ModelViewSyncUnit::_Internal::player_id(const ModelViewSyncUnit* msg) {
  return *msg->player_id_;
}
const ::NFMsg::Vector3&
ModelViewSyncUnit::_Internal::camera_pos(const ModelViewSyncUnit* msg) {
  return *msg->camera_pos_;
}
const ::NFMsg::Vector3&
ModelViewSyncUnit::_Internal::camera_rot(const ModelViewSyncUnit* msg) {
  return *msg->camera_rot_;
}
const ::NFMsg::Vector3&
ModelViewSyncUnit::_Internal::model_pos(const ModelViewSyncUnit* msg) {
  return *msg->model_pos_;
}
const ::NFMsg::Vector3&
ModelViewSyncUnit::_Internal::model_rot(const ModelViewSyncUnit* msg) {
  return *msg->model_rot_;
}
const ::NFMsg::Vector3&
ModelViewSyncUnit::_Internal::model_scale(const ModelViewSyncUnit* msg) {
  return *msg->model_scale_;
}
void ModelViewSyncUnit::clear_player_id() {
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void ModelViewSyncUnit::clear_camera_pos() {
  if (GetArenaNoVirtual() == nullptr && camera_pos_ != nullptr) {
    delete camera_pos_;
  }
  camera_pos_ = nullptr;
}
void ModelViewSyncUnit::clear_camera_rot() {
  if (GetArenaNoVirtual() == nullptr && camera_rot_ != nullptr) {
    delete camera_rot_;
  }
  camera_rot_ = nullptr;
}
void ModelViewSyncUnit::clear_model_pos() {
  if (GetArenaNoVirtual() == nullptr && model_pos_ != nullptr) {
    delete model_pos_;
  }
  model_pos_ = nullptr;
}
void ModelViewSyncUnit::clear_model_rot() {
  if (GetArenaNoVirtual() == nullptr && model_rot_ != nullptr) {
    delete model_rot_;
  }
  model_rot_ = nullptr;
}
void ModelViewSyncUnit::clear_model_scale() {
  if (GetArenaNoVirtual() == nullptr && model_scale_ != nullptr) {
    delete model_scale_;
  }
  model_scale_ = nullptr;
}
ModelViewSyncUnit::ModelViewSyncUnit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ModelViewSyncUnit)
}
ModelViewSyncUnit::ModelViewSyncUnit(const ModelViewSyncUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_camera_pos()) {
    camera_pos_ = new ::NFMsg::Vector3(*from.camera_pos_);
  } else {
    camera_pos_ = nullptr;
  }
  if (from._internal_has_camera_rot()) {
    camera_rot_ = new ::NFMsg::Vector3(*from.camera_rot_);
  } else {
    camera_rot_ = nullptr;
  }
  if (from._internal_has_model_pos()) {
    model_pos_ = new ::NFMsg::Vector3(*from.model_pos_);
  } else {
    model_pos_ = nullptr;
  }
  if (from._internal_has_model_rot()) {
    model_rot_ = new ::NFMsg::Vector3(*from.model_rot_);
  } else {
    model_rot_ = nullptr;
  }
  if (from._internal_has_model_scale()) {
    model_scale_ = new ::NFMsg::Vector3(*from.model_scale_);
  } else {
    model_scale_ = nullptr;
  }
  player_type_ = from.player_type_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ModelViewSyncUnit)
}

void ModelViewSyncUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModelViewSyncUnit_NFMsgShare_2eproto.base);
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_type_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(player_type_));
}

ModelViewSyncUnit::~ModelViewSyncUnit() {
  // @@protoc_insertion_point(destructor:NFMsg.ModelViewSyncUnit)
  SharedDtor();
}

void ModelViewSyncUnit::SharedDtor() {
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete camera_pos_;
  if (this != internal_default_instance()) delete camera_rot_;
  if (this != internal_default_instance()) delete model_pos_;
  if (this != internal_default_instance()) delete model_rot_;
  if (this != internal_default_instance()) delete model_scale_;
}

void ModelViewSyncUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModelViewSyncUnit& ModelViewSyncUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModelViewSyncUnit_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ModelViewSyncUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ModelViewSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && camera_pos_ != nullptr) {
    delete camera_pos_;
  }
  camera_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && camera_rot_ != nullptr) {
    delete camera_rot_;
  }
  camera_rot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_pos_ != nullptr) {
    delete model_pos_;
  }
  model_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_rot_ != nullptr) {
    delete model_rot_;
  }
  model_rot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && model_scale_ != nullptr) {
    delete model_scale_;
  }
  model_scale_ = nullptr;
  player_type_ = 0;
  _internal_metadata_.Clear();
}

const char* ModelViewSyncUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ModelViewSyncUnit.EViewPlayerType player_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_player_type(static_cast<::NFMsg::ModelViewSyncUnit_EViewPlayerType>(val));
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 camera_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 camera_rot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_rot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 model_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 model_rot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_rot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.Vector3 model_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_model_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelViewSyncUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ModelViewSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .NFMsg.ModelViewSyncUnit.EViewPlayerType player_type = 2;
  if (this->player_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_player_type(), target);
  }

  // .NFMsg.Vector3 camera_pos = 3;
  if (this->has_camera_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::camera_pos(this), target, stream);
  }

  // .NFMsg.Vector3 camera_rot = 4;
  if (this->has_camera_rot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::camera_rot(this), target, stream);
  }

  // .NFMsg.Vector3 model_pos = 5;
  if (this->has_model_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::model_pos(this), target, stream);
  }

  // .NFMsg.Vector3 model_rot = 6;
  if (this->has_model_rot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::model_rot(this), target, stream);
  }

  // .NFMsg.Vector3 model_scale = 7;
  if (this->has_model_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::model_scale(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ModelViewSyncUnit)
  return target;
}

size_t ModelViewSyncUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ModelViewSyncUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .NFMsg.Vector3 camera_pos = 3;
  if (this->has_camera_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_pos_);
  }

  // .NFMsg.Vector3 camera_rot = 4;
  if (this->has_camera_rot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_rot_);
  }

  // .NFMsg.Vector3 model_pos = 5;
  if (this->has_model_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_pos_);
  }

  // .NFMsg.Vector3 model_rot = 6;
  if (this->has_model_rot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_rot_);
  }

  // .NFMsg.Vector3 model_scale = 7;
  if (this->has_model_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *model_scale_);
  }

  // .NFMsg.ModelViewSyncUnit.EViewPlayerType player_type = 2;
  if (this->player_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_player_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelViewSyncUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ModelViewSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelViewSyncUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelViewSyncUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ModelViewSyncUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ModelViewSyncUnit)
    MergeFrom(*source);
  }
}

void ModelViewSyncUnit::MergeFrom(const ModelViewSyncUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ModelViewSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_camera_pos()) {
    _internal_mutable_camera_pos()->::NFMsg::Vector3::MergeFrom(from._internal_camera_pos());
  }
  if (from.has_camera_rot()) {
    _internal_mutable_camera_rot()->::NFMsg::Vector3::MergeFrom(from._internal_camera_rot());
  }
  if (from.has_model_pos()) {
    _internal_mutable_model_pos()->::NFMsg::Vector3::MergeFrom(from._internal_model_pos());
  }
  if (from.has_model_rot()) {
    _internal_mutable_model_rot()->::NFMsg::Vector3::MergeFrom(from._internal_model_rot());
  }
  if (from.has_model_scale()) {
    _internal_mutable_model_scale()->::NFMsg::Vector3::MergeFrom(from._internal_model_scale());
  }
  if (from.player_type() != 0) {
    _internal_set_player_type(from._internal_player_type());
  }
}

void ModelViewSyncUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ModelViewSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelViewSyncUnit::CopyFrom(const ModelViewSyncUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ModelViewSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelViewSyncUnit::IsInitialized() const {
  return true;
}

void ModelViewSyncUnit::InternalSwap(ModelViewSyncUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
  swap(camera_pos_, other->camera_pos_);
  swap(camera_rot_, other->camera_rot_);
  swap(model_pos_, other->model_pos_);
  swap(model_rot_, other->model_rot_);
  swap(model_scale_, other->model_scale_);
  swap(player_type_, other->player_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelViewSyncUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckModelViewSync::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckModelViewSync_default_instance_._instance.get_mutable()->sync_unit_ = const_cast< ::NFMsg::ModelViewSyncUnit*>(
      ::NFMsg::ModelViewSyncUnit::internal_default_instance());
}
class ReqAckModelViewSync::_Internal {
 public:
  static const ::NFMsg::ModelViewSyncUnit& sync_unit(const ReqAckModelViewSync* msg);
};

const ::NFMsg::ModelViewSyncUnit&
ReqAckModelViewSync::_Internal::sync_unit(const ReqAckModelViewSync* msg) {
  return *msg->sync_unit_;
}
ReqAckModelViewSync::ReqAckModelViewSync()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckModelViewSync)
}
ReqAckModelViewSync::ReqAckModelViewSync(const ReqAckModelViewSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from._internal_has_sync_unit()) {
    sync_unit_ = new ::NFMsg::ModelViewSyncUnit(*from.sync_unit_);
  } else {
    sync_unit_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckModelViewSync)
}

void ReqAckModelViewSync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckModelViewSync_NFMsgShare_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sync_unit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&sync_unit_)) + sizeof(sequence_));
}

ReqAckModelViewSync::~ReqAckModelViewSync() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckModelViewSync)
  SharedDtor();
}

void ReqAckModelViewSync::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sync_unit_;
}

void ReqAckModelViewSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckModelViewSync& ReqAckModelViewSync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckModelViewSync_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckModelViewSync::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckModelViewSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear();
}

const char* ReqAckModelViewSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NFMsg.ModelViewSyncUnit sync_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckModelViewSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckModelViewSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence(), target);
  }

  // .NFMsg.ModelViewSyncUnit sync_unit = 2;
  if (this->has_sync_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sync_unit(this), target, stream);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckModelViewSync)
  return target;
}

size_t ReqAckModelViewSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckModelViewSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // .NFMsg.ModelViewSyncUnit sync_unit = 2;
  if (this->has_sync_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_unit_);
  }

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckModelViewSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckModelViewSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckModelViewSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckModelViewSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckModelViewSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckModelViewSync)
    MergeFrom(*source);
  }
}

void ReqAckModelViewSync::MergeFrom(const ReqAckModelViewSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckModelViewSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_sync_unit()) {
    _internal_mutable_sync_unit()->::NFMsg::ModelViewSyncUnit::MergeFrom(from._internal_sync_unit());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void ReqAckModelViewSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckModelViewSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckModelViewSync::CopyFrom(const ReqAckModelViewSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckModelViewSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckModelViewSync::IsInitialized() const {
  return true;
}

void ReqAckModelViewSync::InternalSwap(ReqAckModelViewSync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sync_unit_, other->sync_unit_);
  swap(sequence_, other->sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckModelViewSync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReqAckModelView::InitAsDefaultInstance() {
  ::NFMsg::_ReqAckModelView_default_instance_._instance.get_mutable()->player_id_ = const_cast< ::NFMsg::Ident*>(
      ::NFMsg::Ident::internal_default_instance());
}
class ReqAckModelView::_Internal {
 public:
  static const ::NFMsg::Ident& player_id(const ReqAckModelView* msg);
};

const ::NFMsg::Ident&
ReqAckModelView::_Internal::player_id(const ReqAckModelView* msg) {
  return *msg->player_id_;
}
void ReqAckModelView::clear_player_id() {
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqAckModelView::ReqAckModelView()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.ReqAckModelView)
}
ReqAckModelView::ReqAckModelView(const ReqAckModelView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sync_unit_(from.sync_unit_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::NFMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:NFMsg.ReqAckModelView)
}

void ReqAckModelView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReqAckModelView_NFMsgShare_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  player_id_ = nullptr;
}

ReqAckModelView::~ReqAckModelView() {
  // @@protoc_insertion_point(destructor:NFMsg.ReqAckModelView)
  SharedDtor();
}

void ReqAckModelView::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAckModelView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqAckModelView& ReqAckModelView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqAckModelView_NFMsgShare_2eproto.base);
  return *internal_default_instance();
}


void ReqAckModelView::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.ReqAckModelView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sync_unit_.Clear();
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReqAckModelView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NFMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .NFMsg.ModelViewSyncUnit sync_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sync_unit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckModelView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.ReqAckModelView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .NFMsg.ModelViewSyncUnit sync_unit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sync_unit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sync_unit(i), target, stream);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.ReqAckModelView)
  return target;
}

size_t ReqAckModelView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.ReqAckModelView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NFMsg.ModelViewSyncUnit sync_unit = 2;
  total_size += 1UL * this->_internal_sync_unit_size();
  for (const auto& msg : this->sync_unit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // .NFMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckModelView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.ReqAckModelView)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckModelView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckModelView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.ReqAckModelView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.ReqAckModelView)
    MergeFrom(*source);
  }
}

void ReqAckModelView::MergeFrom(const ReqAckModelView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.ReqAckModelView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sync_unit_.MergeFrom(from.sync_unit_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::NFMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqAckModelView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.ReqAckModelView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckModelView::CopyFrom(const ReqAckModelView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.ReqAckModelView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckModelView::IsInitialized() const {
  return true;
}

void ReqAckModelView::InternalSwap(ReqAckModelView* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sync_unit_.InternalSwap(&other->sync_unit_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckModelView::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NFMsg::ReqEnterGameServer* Arena::CreateMaybeMessage< ::NFMsg::ReqEnterGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqEnterGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage< ::NFMsg::ReqAckEnterGameSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckEnterGameSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqHeartBeat* Arena::CreateMaybeMessage< ::NFMsg::ReqHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage< ::NFMsg::ReqLeaveGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqLeaveGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PlayerEntryInfo* Arena::CreateMaybeMessage< ::NFMsg::PlayerEntryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PlayerEntryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckPlayerEntryList* Arena::CreateMaybeMessage< ::NFMsg::AckPlayerEntryList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPlayerEntryList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage< ::NFMsg::AckPlayerLeaveList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::AckPlayerLeaveList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::PosSyncUnit* Arena::CreateMaybeMessage< ::NFMsg::PosSyncUnit >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PosSyncUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerPosSync >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerPosSync >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::EffectData* Arena::CreateMaybeMessage< ::NFMsg::EffectData >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::EffectData >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckUseSkill* Arena::CreateMaybeMessage< ::NFMsg::ReqAckUseSkill >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckUseSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckSwapScene* Arena::CreateMaybeMessage< ::NFMsg::ReqAckSwapScene >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckSwapScene >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage< ::NFMsg::ReqAckPlayerChat >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckPlayerChat >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ModelSyncUnit* Arena::CreateMaybeMessage< ::NFMsg::ModelSyncUnit >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ModelSyncUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckModelSync* Arena::CreateMaybeMessage< ::NFMsg::ReqAckModelSync >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckModelSync >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ModelInfoUnit* Arena::CreateMaybeMessage< ::NFMsg::ModelInfoUnit >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ModelInfoUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckModelInfoList* Arena::CreateMaybeMessage< ::NFMsg::ReqAckModelInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckModelInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckModelTarget* Arena::CreateMaybeMessage< ::NFMsg::ReqAckModelTarget >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckModelTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckModelSwitch* Arena::CreateMaybeMessage< ::NFMsg::ReqAckModelSwitch >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckModelSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ModelViewSyncUnit* Arena::CreateMaybeMessage< ::NFMsg::ModelViewSyncUnit >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ModelViewSyncUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckModelViewSync* Arena::CreateMaybeMessage< ::NFMsg::ReqAckModelViewSync >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckModelViewSync >(arena);
}
template<> PROTOBUF_NOINLINE ::NFMsg::ReqAckModelView* Arena::CreateMaybeMessage< ::NFMsg::ReqAckModelView >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::ReqAckModelView >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
