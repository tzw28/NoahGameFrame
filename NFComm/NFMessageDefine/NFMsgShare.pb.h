// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgShare.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NFMsgShare_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NFMsgShare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "NFDefine.pb.h"
#include "NFMsgBase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NFMsgShare_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NFMsgShare_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NFMsgShare_2eproto;
namespace NFMsg {
class AckPlayerEntryList;
class AckPlayerEntryListDefaultTypeInternal;
extern AckPlayerEntryListDefaultTypeInternal _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveList;
class AckPlayerLeaveListDefaultTypeInternal;
extern AckPlayerLeaveListDefaultTypeInternal _AckPlayerLeaveList_default_instance_;
class EffectData;
class EffectDataDefaultTypeInternal;
extern EffectDataDefaultTypeInternal _EffectData_default_instance_;
class ModelInfoUnit;
class ModelInfoUnitDefaultTypeInternal;
extern ModelInfoUnitDefaultTypeInternal _ModelInfoUnit_default_instance_;
class ModelSyncUnit;
class ModelSyncUnitDefaultTypeInternal;
extern ModelSyncUnitDefaultTypeInternal _ModelSyncUnit_default_instance_;
class ModelViewSyncUnit;
class ModelViewSyncUnitDefaultTypeInternal;
extern ModelViewSyncUnitDefaultTypeInternal _ModelViewSyncUnit_default_instance_;
class PlayerEntryInfo;
class PlayerEntryInfoDefaultTypeInternal;
extern PlayerEntryInfoDefaultTypeInternal _PlayerEntryInfo_default_instance_;
class PosSyncUnit;
class PosSyncUnitDefaultTypeInternal;
extern PosSyncUnitDefaultTypeInternal _PosSyncUnit_default_instance_;
class ReqAckEnterGameSuccess;
class ReqAckEnterGameSuccessDefaultTypeInternal;
extern ReqAckEnterGameSuccessDefaultTypeInternal _ReqAckEnterGameSuccess_default_instance_;
class ReqAckModelInfoList;
class ReqAckModelInfoListDefaultTypeInternal;
extern ReqAckModelInfoListDefaultTypeInternal _ReqAckModelInfoList_default_instance_;
class ReqAckModelSwitch;
class ReqAckModelSwitchDefaultTypeInternal;
extern ReqAckModelSwitchDefaultTypeInternal _ReqAckModelSwitch_default_instance_;
class ReqAckModelSync;
class ReqAckModelSyncDefaultTypeInternal;
extern ReqAckModelSyncDefaultTypeInternal _ReqAckModelSync_default_instance_;
class ReqAckModelTarget;
class ReqAckModelTargetDefaultTypeInternal;
extern ReqAckModelTargetDefaultTypeInternal _ReqAckModelTarget_default_instance_;
class ReqAckModelView;
class ReqAckModelViewDefaultTypeInternal;
extern ReqAckModelViewDefaultTypeInternal _ReqAckModelView_default_instance_;
class ReqAckModelViewSync;
class ReqAckModelViewSyncDefaultTypeInternal;
extern ReqAckModelViewSyncDefaultTypeInternal _ReqAckModelViewSync_default_instance_;
class ReqAckPlayerChat;
class ReqAckPlayerChatDefaultTypeInternal;
extern ReqAckPlayerChatDefaultTypeInternal _ReqAckPlayerChat_default_instance_;
class ReqAckPlayerPosSync;
class ReqAckPlayerPosSyncDefaultTypeInternal;
extern ReqAckPlayerPosSyncDefaultTypeInternal _ReqAckPlayerPosSync_default_instance_;
class ReqAckSwapScene;
class ReqAckSwapSceneDefaultTypeInternal;
extern ReqAckSwapSceneDefaultTypeInternal _ReqAckSwapScene_default_instance_;
class ReqAckUseSkill;
class ReqAckUseSkillDefaultTypeInternal;
extern ReqAckUseSkillDefaultTypeInternal _ReqAckUseSkill_default_instance_;
class ReqEnterGameServer;
class ReqEnterGameServerDefaultTypeInternal;
extern ReqEnterGameServerDefaultTypeInternal _ReqEnterGameServer_default_instance_;
class ReqHeartBeat;
class ReqHeartBeatDefaultTypeInternal;
extern ReqHeartBeatDefaultTypeInternal _ReqHeartBeat_default_instance_;
class ReqLeaveGameServer;
class ReqLeaveGameServerDefaultTypeInternal;
extern ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
}  // namespace NFMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::NFMsg::AckPlayerEntryList* Arena::CreateMaybeMessage<::NFMsg::AckPlayerEntryList>(Arena*);
template<> ::NFMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage<::NFMsg::AckPlayerLeaveList>(Arena*);
template<> ::NFMsg::EffectData* Arena::CreateMaybeMessage<::NFMsg::EffectData>(Arena*);
template<> ::NFMsg::ModelInfoUnit* Arena::CreateMaybeMessage<::NFMsg::ModelInfoUnit>(Arena*);
template<> ::NFMsg::ModelSyncUnit* Arena::CreateMaybeMessage<::NFMsg::ModelSyncUnit>(Arena*);
template<> ::NFMsg::ModelViewSyncUnit* Arena::CreateMaybeMessage<::NFMsg::ModelViewSyncUnit>(Arena*);
template<> ::NFMsg::PlayerEntryInfo* Arena::CreateMaybeMessage<::NFMsg::PlayerEntryInfo>(Arena*);
template<> ::NFMsg::PosSyncUnit* Arena::CreateMaybeMessage<::NFMsg::PosSyncUnit>(Arena*);
template<> ::NFMsg::ReqAckEnterGameSuccess* Arena::CreateMaybeMessage<::NFMsg::ReqAckEnterGameSuccess>(Arena*);
template<> ::NFMsg::ReqAckModelInfoList* Arena::CreateMaybeMessage<::NFMsg::ReqAckModelInfoList>(Arena*);
template<> ::NFMsg::ReqAckModelSwitch* Arena::CreateMaybeMessage<::NFMsg::ReqAckModelSwitch>(Arena*);
template<> ::NFMsg::ReqAckModelSync* Arena::CreateMaybeMessage<::NFMsg::ReqAckModelSync>(Arena*);
template<> ::NFMsg::ReqAckModelTarget* Arena::CreateMaybeMessage<::NFMsg::ReqAckModelTarget>(Arena*);
template<> ::NFMsg::ReqAckModelView* Arena::CreateMaybeMessage<::NFMsg::ReqAckModelView>(Arena*);
template<> ::NFMsg::ReqAckModelViewSync* Arena::CreateMaybeMessage<::NFMsg::ReqAckModelViewSync>(Arena*);
template<> ::NFMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage<::NFMsg::ReqAckPlayerChat>(Arena*);
template<> ::NFMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage<::NFMsg::ReqAckPlayerPosSync>(Arena*);
template<> ::NFMsg::ReqAckSwapScene* Arena::CreateMaybeMessage<::NFMsg::ReqAckSwapScene>(Arena*);
template<> ::NFMsg::ReqAckUseSkill* Arena::CreateMaybeMessage<::NFMsg::ReqAckUseSkill>(Arena*);
template<> ::NFMsg::ReqEnterGameServer* Arena::CreateMaybeMessage<::NFMsg::ReqEnterGameServer>(Arena*);
template<> ::NFMsg::ReqHeartBeat* Arena::CreateMaybeMessage<::NFMsg::ReqHeartBeat>(Arena*);
template<> ::NFMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage<::NFMsg::ReqLeaveGameServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace NFMsg {

enum PosSyncUnit_EMoveType : int {
  PosSyncUnit_EMoveType_EMT_WALK = 0,
  PosSyncUnit_EMoveType_EET_SPEEDY = 1,
  PosSyncUnit_EMoveType_EET_TELEPORT = 2,
  PosSyncUnit_EMoveType_PosSyncUnit_EMoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PosSyncUnit_EMoveType_PosSyncUnit_EMoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PosSyncUnit_EMoveType_IsValid(int value);
constexpr PosSyncUnit_EMoveType PosSyncUnit_EMoveType_EMoveType_MIN = PosSyncUnit_EMoveType_EMT_WALK;
constexpr PosSyncUnit_EMoveType PosSyncUnit_EMoveType_EMoveType_MAX = PosSyncUnit_EMoveType_EET_TELEPORT;
constexpr int PosSyncUnit_EMoveType_EMoveType_ARRAYSIZE = PosSyncUnit_EMoveType_EMoveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosSyncUnit_EMoveType_descriptor();
template<typename T>
inline const std::string& PosSyncUnit_EMoveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PosSyncUnit_EMoveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PosSyncUnit_EMoveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PosSyncUnit_EMoveType_descriptor(), enum_t_value);
}
inline bool PosSyncUnit_EMoveType_Parse(
    const std::string& name, PosSyncUnit_EMoveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PosSyncUnit_EMoveType>(
    PosSyncUnit_EMoveType_descriptor(), name, value);
}
enum EffectData_EResultType : int {
  EffectData_EResultType_EET_FAIL = 0,
  EffectData_EResultType_EET_SUCCESS = 1,
  EffectData_EResultType_EET_REFUSE = 2,
  EffectData_EResultType_EET_MISS = 3,
  EffectData_EResultType_EET_CRIT = 4,
  EffectData_EResultType_EET_ULTI = 5,
  EffectData_EResultType_EffectData_EResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EffectData_EResultType_EffectData_EResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EffectData_EResultType_IsValid(int value);
constexpr EffectData_EResultType EffectData_EResultType_EResultType_MIN = EffectData_EResultType_EET_FAIL;
constexpr EffectData_EResultType EffectData_EResultType_EResultType_MAX = EffectData_EResultType_EET_ULTI;
constexpr int EffectData_EResultType_EResultType_ARRAYSIZE = EffectData_EResultType_EResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EffectData_EResultType_descriptor();
template<typename T>
inline const std::string& EffectData_EResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EffectData_EResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EffectData_EResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EffectData_EResultType_descriptor(), enum_t_value);
}
inline bool EffectData_EResultType_Parse(
    const std::string& name, EffectData_EResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EffectData_EResultType>(
    EffectData_EResultType_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatChannel : int {
  ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL = 0,
  ReqAckPlayerChat_EGameChatChannel_EGCC_CLAN = 1,
  ReqAckPlayerChat_EGameChatChannel_EGCC_ROOM = 2,
  ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM = 3,
  ReqAckPlayerChat_EGameChatChannel_ReqAckPlayerChat_EGameChatChannel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqAckPlayerChat_EGameChatChannel_ReqAckPlayerChat_EGameChatChannel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value);
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MIN = ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX = ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM;
constexpr int ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_ARRAYSIZE = ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor();
template<typename T>
inline const std::string& ReqAckPlayerChat_EGameChatChannel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqAckPlayerChat_EGameChatChannel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqAckPlayerChat_EGameChatChannel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatChannel_descriptor(), enum_t_value);
}
inline bool ReqAckPlayerChat_EGameChatChannel_Parse(
    const std::string& name, ReqAckPlayerChat_EGameChatChannel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatChannel>(
    ReqAckPlayerChat_EGameChatChannel_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatType : int {
  ReqAckPlayerChat_EGameChatType_EGCT_TEXT = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_VOICE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_EMOJI = 2,
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_TEXT;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_EMOJI;
constexpr int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
template<typename T>
inline const std::string& ReqAckPlayerChat_EGameChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqAckPlayerChat_EGameChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqAckPlayerChat_EGameChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), enum_t_value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    const std::string& name, ReqAckPlayerChat_EGameChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
enum ModelViewSyncUnit_EViewPlayerType : int {
  ModelViewSyncUnit_EViewPlayerType_EVST_PC = 0,
  ModelViewSyncUnit_EViewPlayerType_EVST_HOLOLENS = 1,
  ModelViewSyncUnit_EViewPlayerType_ModelViewSyncUnit_EViewPlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModelViewSyncUnit_EViewPlayerType_ModelViewSyncUnit_EViewPlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModelViewSyncUnit_EViewPlayerType_IsValid(int value);
constexpr ModelViewSyncUnit_EViewPlayerType ModelViewSyncUnit_EViewPlayerType_EViewPlayerType_MIN = ModelViewSyncUnit_EViewPlayerType_EVST_PC;
constexpr ModelViewSyncUnit_EViewPlayerType ModelViewSyncUnit_EViewPlayerType_EViewPlayerType_MAX = ModelViewSyncUnit_EViewPlayerType_EVST_HOLOLENS;
constexpr int ModelViewSyncUnit_EViewPlayerType_EViewPlayerType_ARRAYSIZE = ModelViewSyncUnit_EViewPlayerType_EViewPlayerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModelViewSyncUnit_EViewPlayerType_descriptor();
template<typename T>
inline const std::string& ModelViewSyncUnit_EViewPlayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModelViewSyncUnit_EViewPlayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModelViewSyncUnit_EViewPlayerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModelViewSyncUnit_EViewPlayerType_descriptor(), enum_t_value);
}
inline bool ModelViewSyncUnit_EViewPlayerType_Parse(
    const std::string& name, ModelViewSyncUnit_EViewPlayerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModelViewSyncUnit_EViewPlayerType>(
    ModelViewSyncUnit_EViewPlayerType_descriptor(), name, value);
}
// ===================================================================

class ReqEnterGameServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqEnterGameServer) */ {
 public:
  ReqEnterGameServer();
  virtual ~ReqEnterGameServer();

  ReqEnterGameServer(const ReqEnterGameServer& from);
  ReqEnterGameServer(ReqEnterGameServer&& from) noexcept
    : ReqEnterGameServer() {
    *this = ::std::move(from);
  }

  inline ReqEnterGameServer& operator=(const ReqEnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqEnterGameServer& operator=(ReqEnterGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqEnterGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqEnterGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqEnterGameServer*>(
               &_ReqEnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqEnterGameServer& a, ReqEnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqEnterGameServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqEnterGameServer* New() const final {
    return CreateMaybeMessage<ReqEnterGameServer>(nullptr);
  }

  ReqEnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqEnterGameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqEnterGameServer& from);
  void MergeFrom(const ReqEnterGameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEnterGameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqEnterGameServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kGameIdFieldNumber = 3,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .NFMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::NFMsg::Ident& id() const;
  ::NFMsg::Ident* release_id();
  ::NFMsg::Ident* mutable_id();
  void set_allocated_id(::NFMsg::Ident* id);
  private:
  const ::NFMsg::Ident& _internal_id() const;
  ::NFMsg::Ident* _internal_mutable_id();
  public:

  // int32 game_id = 3;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqEnterGameServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::NFMsg::Ident* id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckEnterGameSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckEnterGameSuccess) */ {
 public:
  ReqAckEnterGameSuccess();
  virtual ~ReqAckEnterGameSuccess();

  ReqAckEnterGameSuccess(const ReqAckEnterGameSuccess& from);
  ReqAckEnterGameSuccess(ReqAckEnterGameSuccess&& from) noexcept
    : ReqAckEnterGameSuccess() {
    *this = ::std::move(from);
  }

  inline ReqAckEnterGameSuccess& operator=(const ReqAckEnterGameSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckEnterGameSuccess& operator=(ReqAckEnterGameSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckEnterGameSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckEnterGameSuccess* internal_default_instance() {
    return reinterpret_cast<const ReqAckEnterGameSuccess*>(
               &_ReqAckEnterGameSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqAckEnterGameSuccess& a, ReqAckEnterGameSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckEnterGameSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckEnterGameSuccess* New() const final {
    return CreateMaybeMessage<ReqAckEnterGameSuccess>(nullptr);
  }

  ReqAckEnterGameSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckEnterGameSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckEnterGameSuccess& from);
  void MergeFrom(const ReqAckEnterGameSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckEnterGameSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckEnterGameSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // int32 arg = 1;
  void clear_arg();
  ::PROTOBUF_NAMESPACE_ID::int32 arg() const;
  void set_arg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg() const;
  void _internal_set_arg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckEnterGameSuccess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqHeartBeat) */ {
 public:
  ReqHeartBeat();
  virtual ~ReqHeartBeat();

  ReqHeartBeat(const ReqHeartBeat& from);
  ReqHeartBeat(ReqHeartBeat&& from) noexcept
    : ReqHeartBeat() {
    *this = ::std::move(from);
  }

  inline ReqHeartBeat& operator=(const ReqHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHeartBeat& operator=(ReqHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ReqHeartBeat*>(
               &_ReqHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqHeartBeat& a, ReqHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqHeartBeat* New() const final {
    return CreateMaybeMessage<ReqHeartBeat>(nullptr);
  }

  ReqHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqHeartBeat& from);
  void MergeFrom(const ReqHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // int32 arg = 1;
  void clear_arg();
  ::PROTOBUF_NAMESPACE_ID::int32 arg() const;
  void set_arg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg() const;
  void _internal_set_arg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqLeaveGameServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqLeaveGameServer) */ {
 public:
  ReqLeaveGameServer();
  virtual ~ReqLeaveGameServer();

  ReqLeaveGameServer(const ReqLeaveGameServer& from);
  ReqLeaveGameServer(ReqLeaveGameServer&& from) noexcept
    : ReqLeaveGameServer() {
    *this = ::std::move(from);
  }

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLeaveGameServer& operator=(ReqLeaveGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqLeaveGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqLeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveGameServer*>(
               &_ReqLeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqLeaveGameServer& a, ReqLeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLeaveGameServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLeaveGameServer* New() const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(nullptr);
  }

  ReqLeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLeaveGameServer& from);
  void MergeFrom(const ReqLeaveGameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLeaveGameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqLeaveGameServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 1,
  };
  // int32 arg = 1;
  void clear_arg();
  ::PROTOBUF_NAMESPACE_ID::int32 arg() const;
  void set_arg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_arg() const;
  void _internal_set_arg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqLeaveGameServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 arg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class PlayerEntryInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PlayerEntryInfo) */ {
 public:
  PlayerEntryInfo();
  virtual ~PlayerEntryInfo();

  PlayerEntryInfo(const PlayerEntryInfo& from);
  PlayerEntryInfo(PlayerEntryInfo&& from) noexcept
    : PlayerEntryInfo() {
    *this = ::std::move(from);
  }

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerEntryInfo& operator=(PlayerEntryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerEntryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerEntryInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerEntryInfo*>(
               &_PlayerEntryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerEntryInfo& a, PlayerEntryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerEntryInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerEntryInfo* New() const final {
    return CreateMaybeMessage<PlayerEntryInfo>(nullptr);
  }

  PlayerEntryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerEntryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerEntryInfo& from);
  void MergeFrom(const PlayerEntryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerEntryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PlayerEntryInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 7,
    kClassIdFieldNumber = 9,
    kObjectGuidFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kCareerTypeFieldNumber = 5,
    kPlayerStateFieldNumber = 6,
    kSceneIdFieldNumber = 8,
  };
  // bytes config_id = 7;
  void clear_config_id();
  const std::string& config_id() const;
  void set_config_id(const std::string& value);
  void set_config_id(std::string&& value);
  void set_config_id(const char* value);
  void set_config_id(const void* value, size_t size);
  std::string* mutable_config_id();
  std::string* release_config_id();
  void set_allocated_config_id(std::string* config_id);
  private:
  const std::string& _internal_config_id() const;
  void _internal_set_config_id(const std::string& value);
  std::string* _internal_mutable_config_id();
  public:

  // bytes class_id = 9;
  void clear_class_id();
  const std::string& class_id() const;
  void set_class_id(const std::string& value);
  void set_class_id(std::string&& value);
  void set_class_id(const char* value);
  void set_class_id(const void* value, size_t size);
  std::string* mutable_class_id();
  std::string* release_class_id();
  void set_allocated_class_id(std::string* class_id);
  private:
  const std::string& _internal_class_id() const;
  void _internal_set_class_id(const std::string& value);
  std::string* _internal_mutable_class_id();
  public:

  // .NFMsg.Ident object_guid = 1;
  bool has_object_guid() const;
  private:
  bool _internal_has_object_guid() const;
  public:
  void clear_object_guid();
  const ::NFMsg::Ident& object_guid() const;
  ::NFMsg::Ident* release_object_guid();
  ::NFMsg::Ident* mutable_object_guid();
  void set_allocated_object_guid(::NFMsg::Ident* object_guid);
  private:
  const ::NFMsg::Ident& _internal_object_guid() const;
  ::NFMsg::Ident* _internal_mutable_object_guid();
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // int32 career_type = 5;
  void clear_career_type();
  ::PROTOBUF_NAMESPACE_ID::int32 career_type() const;
  void set_career_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_career_type() const;
  void _internal_set_career_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 player_state = 6;
  void clear_player_state();
  ::PROTOBUF_NAMESPACE_ID::int32 player_state() const;
  void set_player_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_state() const;
  void _internal_set_player_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scene_id = 8;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PlayerEntryInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
  ::NFMsg::Ident* object_guid_;
  float x_;
  float y_;
  float z_;
  ::PROTOBUF_NAMESPACE_ID::int32 career_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerEntryList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckPlayerEntryList) */ {
 public:
  AckPlayerEntryList();
  virtual ~AckPlayerEntryList();

  AckPlayerEntryList(const AckPlayerEntryList& from);
  AckPlayerEntryList(AckPlayerEntryList&& from) noexcept
    : AckPlayerEntryList() {
    *this = ::std::move(from);
  }

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerEntryList& operator=(AckPlayerEntryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckPlayerEntryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckPlayerEntryList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerEntryList*>(
               &_AckPlayerEntryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AckPlayerEntryList& a, AckPlayerEntryList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerEntryList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerEntryList* New() const final {
    return CreateMaybeMessage<AckPlayerEntryList>(nullptr);
  }

  AckPlayerEntryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerEntryList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerEntryList& from);
  void MergeFrom(const AckPlayerEntryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerEntryList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.AckPlayerEntryList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .NFMsg.PlayerEntryInfo object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::NFMsg::PlayerEntryInfo* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
      mutable_object_list();
  private:
  const ::NFMsg::PlayerEntryInfo& _internal_object_list(int index) const;
  ::NFMsg::PlayerEntryInfo* _internal_add_object_list();
  public:
  const ::NFMsg::PlayerEntryInfo& object_list(int index) const;
  ::NFMsg::PlayerEntryInfo* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerEntryList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerLeaveList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.AckPlayerLeaveList) */ {
 public:
  AckPlayerLeaveList();
  virtual ~AckPlayerLeaveList();

  AckPlayerLeaveList(const AckPlayerLeaveList& from);
  AckPlayerLeaveList(AckPlayerLeaveList&& from) noexcept
    : AckPlayerLeaveList() {
    *this = ::std::move(from);
  }

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerLeaveList& operator=(AckPlayerLeaveList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckPlayerLeaveList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckPlayerLeaveList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerLeaveList*>(
               &_AckPlayerLeaveList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AckPlayerLeaveList& a, AckPlayerLeaveList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerLeaveList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerLeaveList* New() const final {
    return CreateMaybeMessage<AckPlayerLeaveList>(nullptr);
  }

  AckPlayerLeaveList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerLeaveList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerLeaveList& from);
  void MergeFrom(const AckPlayerLeaveList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerLeaveList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.AckPlayerLeaveList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .NFMsg.Ident object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::NFMsg::Ident* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >*
      mutable_object_list();
  private:
  const ::NFMsg::Ident& _internal_object_list(int index) const;
  ::NFMsg::Ident* _internal_add_object_list();
  public:
  const ::NFMsg::Ident& object_list(int index) const;
  ::NFMsg::Ident* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:NFMsg.AckPlayerLeaveList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class PosSyncUnit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.PosSyncUnit) */ {
 public:
  PosSyncUnit();
  virtual ~PosSyncUnit();

  PosSyncUnit(const PosSyncUnit& from);
  PosSyncUnit(PosSyncUnit&& from) noexcept
    : PosSyncUnit() {
    *this = ::std::move(from);
  }

  inline PosSyncUnit& operator=(const PosSyncUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosSyncUnit& operator=(PosSyncUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PosSyncUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PosSyncUnit* internal_default_instance() {
    return reinterpret_cast<const PosSyncUnit*>(
               &_PosSyncUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PosSyncUnit& a, PosSyncUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(PosSyncUnit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosSyncUnit* New() const final {
    return CreateMaybeMessage<PosSyncUnit>(nullptr);
  }

  PosSyncUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosSyncUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosSyncUnit& from);
  void MergeFrom(const PosSyncUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosSyncUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.PosSyncUnit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PosSyncUnit_EMoveType EMoveType;
  static constexpr EMoveType EMT_WALK =
    PosSyncUnit_EMoveType_EMT_WALK;
  static constexpr EMoveType EET_SPEEDY =
    PosSyncUnit_EMoveType_EET_SPEEDY;
  static constexpr EMoveType EET_TELEPORT =
    PosSyncUnit_EMoveType_EET_TELEPORT;
  static inline bool EMoveType_IsValid(int value) {
    return PosSyncUnit_EMoveType_IsValid(value);
  }
  static constexpr EMoveType EMoveType_MIN =
    PosSyncUnit_EMoveType_EMoveType_MIN;
  static constexpr EMoveType EMoveType_MAX =
    PosSyncUnit_EMoveType_EMoveType_MAX;
  static constexpr int EMoveType_ARRAYSIZE =
    PosSyncUnit_EMoveType_EMoveType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EMoveType_descriptor() {
    return PosSyncUnit_EMoveType_descriptor();
  }
  template<typename T>
  static inline const std::string& EMoveType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EMoveType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EMoveType_Name.");
    return PosSyncUnit_EMoveType_Name(enum_t_value);
  }
  static inline bool EMoveType_Parse(const std::string& name,
      EMoveType* value) {
    return PosSyncUnit_EMoveType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMoverFieldNumber = 1,
    kPosFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kStatusFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // .NFMsg.Ident mover = 1;
  bool has_mover() const;
  private:
  bool _internal_has_mover() const;
  public:
  void clear_mover();
  const ::NFMsg::Ident& mover() const;
  ::NFMsg::Ident* release_mover();
  ::NFMsg::Ident* mutable_mover();
  void set_allocated_mover(::NFMsg::Ident* mover);
  private:
  const ::NFMsg::Ident& _internal_mover() const;
  ::NFMsg::Ident* _internal_mutable_mover();
  public:

  // .NFMsg.Vector3 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::NFMsg::Vector3& pos() const;
  ::NFMsg::Vector3* release_pos();
  ::NFMsg::Vector3* mutable_pos();
  void set_allocated_pos(::NFMsg::Vector3* pos);
  private:
  const ::NFMsg::Vector3& _internal_pos() const;
  ::NFMsg::Vector3* _internal_mutable_pos();
  public:

  // .NFMsg.Vector3 orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::NFMsg::Vector3& orientation() const;
  ::NFMsg::Vector3* release_orientation();
  ::NFMsg::Vector3* mutable_orientation();
  void set_allocated_orientation(::NFMsg::Vector3* orientation);
  private:
  const ::NFMsg::Vector3& _internal_orientation() const;
  ::NFMsg::Vector3* _internal_mutable_orientation();
  public:

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .NFMsg.PosSyncUnit.EMoveType type = 5;
  void clear_type();
  ::NFMsg::PosSyncUnit_EMoveType type() const;
  void set_type(::NFMsg::PosSyncUnit_EMoveType value);
  private:
  ::NFMsg::PosSyncUnit_EMoveType _internal_type() const;
  void _internal_set_type(::NFMsg::PosSyncUnit_EMoveType value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.PosSyncUnit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* mover_;
  ::NFMsg::Vector3* pos_;
  ::NFMsg::Vector3* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckPlayerPosSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckPlayerPosSync) */ {
 public:
  ReqAckPlayerPosSync();
  virtual ~ReqAckPlayerPosSync();

  ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from);
  ReqAckPlayerPosSync(ReqAckPlayerPosSync&& from) noexcept
    : ReqAckPlayerPosSync() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerPosSync& operator=(const ReqAckPlayerPosSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckPlayerPosSync& operator=(ReqAckPlayerPosSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckPlayerPosSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckPlayerPosSync* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerPosSync*>(
               &_ReqAckPlayerPosSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqAckPlayerPosSync& a, ReqAckPlayerPosSync& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckPlayerPosSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerPosSync* New() const final {
    return CreateMaybeMessage<ReqAckPlayerPosSync>(nullptr);
  }

  ReqAckPlayerPosSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerPosSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckPlayerPosSync& from);
  void MergeFrom(const ReqAckPlayerPosSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerPosSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckPlayerPosSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncUnitFieldNumber = 2,
    kSequenceFieldNumber = 1,
  };
  // repeated .NFMsg.PosSyncUnit sync_unit = 2;
  int sync_unit_size() const;
  private:
  int _internal_sync_unit_size() const;
  public:
  void clear_sync_unit();
  ::NFMsg::PosSyncUnit* mutable_sync_unit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit >*
      mutable_sync_unit();
  private:
  const ::NFMsg::PosSyncUnit& _internal_sync_unit(int index) const;
  ::NFMsg::PosSyncUnit* _internal_add_sync_unit();
  public:
  const ::NFMsg::PosSyncUnit& sync_unit(int index) const;
  ::NFMsg::PosSyncUnit* add_sync_unit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit >&
      sync_unit() const;

  // int32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerPosSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit > sync_unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class EffectData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.EffectData) */ {
 public:
  EffectData();
  virtual ~EffectData();

  EffectData(const EffectData& from);
  EffectData(EffectData&& from) noexcept
    : EffectData() {
    *this = ::std::move(from);
  }

  inline EffectData& operator=(const EffectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EffectData& operator=(EffectData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EffectData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EffectData* internal_default_instance() {
    return reinterpret_cast<const EffectData*>(
               &_EffectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(EffectData& a, EffectData& b) {
    a.Swap(&b);
  }
  inline void Swap(EffectData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EffectData* New() const final {
    return CreateMaybeMessage<EffectData>(nullptr);
  }

  EffectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EffectData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EffectData& from);
  void MergeFrom(const EffectData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.EffectData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EffectData_EResultType EResultType;
  static constexpr EResultType EET_FAIL =
    EffectData_EResultType_EET_FAIL;
  static constexpr EResultType EET_SUCCESS =
    EffectData_EResultType_EET_SUCCESS;
  static constexpr EResultType EET_REFUSE =
    EffectData_EResultType_EET_REFUSE;
  static constexpr EResultType EET_MISS =
    EffectData_EResultType_EET_MISS;
  static constexpr EResultType EET_CRIT =
    EffectData_EResultType_EET_CRIT;
  static constexpr EResultType EET_ULTI =
    EffectData_EResultType_EET_ULTI;
  static inline bool EResultType_IsValid(int value) {
    return EffectData_EResultType_IsValid(value);
  }
  static constexpr EResultType EResultType_MIN =
    EffectData_EResultType_EResultType_MIN;
  static constexpr EResultType EResultType_MAX =
    EffectData_EResultType_EResultType_MAX;
  static constexpr int EResultType_ARRAYSIZE =
    EffectData_EResultType_EResultType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResultType_descriptor() {
    return EffectData_EResultType_descriptor();
  }
  template<typename T>
  static inline const std::string& EResultType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResultType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResultType_Name.");
    return EffectData_EResultType_Name(enum_t_value);
  }
  static inline bool EResultType_Parse(const std::string& name,
      EResultType* value) {
    return EffectData_EResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEffectIdentFieldNumber = 1,
    kEffectValueFieldNumber = 2,
    kEffectRltFieldNumber = 3,
  };
  // .NFMsg.Ident effect_ident = 1;
  bool has_effect_ident() const;
  private:
  bool _internal_has_effect_ident() const;
  public:
  void clear_effect_ident();
  const ::NFMsg::Ident& effect_ident() const;
  ::NFMsg::Ident* release_effect_ident();
  ::NFMsg::Ident* mutable_effect_ident();
  void set_allocated_effect_ident(::NFMsg::Ident* effect_ident);
  private:
  const ::NFMsg::Ident& _internal_effect_ident() const;
  ::NFMsg::Ident* _internal_mutable_effect_ident();
  public:

  // int32 effect_value = 2;
  void clear_effect_value();
  ::PROTOBUF_NAMESPACE_ID::int32 effect_value() const;
  void set_effect_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_effect_value() const;
  void _internal_set_effect_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .NFMsg.EffectData.EResultType effect_rlt = 3;
  void clear_effect_rlt();
  ::NFMsg::EffectData_EResultType effect_rlt() const;
  void set_effect_rlt(::NFMsg::EffectData_EResultType value);
  private:
  ::NFMsg::EffectData_EResultType _internal_effect_rlt() const;
  void _internal_set_effect_rlt(::NFMsg::EffectData_EResultType value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.EffectData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* effect_ident_;
  ::PROTOBUF_NAMESPACE_ID::int32 effect_value_;
  int effect_rlt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckUseSkill :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckUseSkill) */ {
 public:
  ReqAckUseSkill();
  virtual ~ReqAckUseSkill();

  ReqAckUseSkill(const ReqAckUseSkill& from);
  ReqAckUseSkill(ReqAckUseSkill&& from) noexcept
    : ReqAckUseSkill() {
    *this = ::std::move(from);
  }

  inline ReqAckUseSkill& operator=(const ReqAckUseSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckUseSkill& operator=(ReqAckUseSkill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckUseSkill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckUseSkill* internal_default_instance() {
    return reinterpret_cast<const ReqAckUseSkill*>(
               &_ReqAckUseSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReqAckUseSkill& a, ReqAckUseSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckUseSkill* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckUseSkill* New() const final {
    return CreateMaybeMessage<ReqAckUseSkill>(nullptr);
  }

  ReqAckUseSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckUseSkill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckUseSkill& from);
  void MergeFrom(const ReqAckUseSkill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckUseSkill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckUseSkill";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectDataFieldNumber = 5,
    kSkillIdFieldNumber = 2,
    kUserFieldNumber = 1,
    kServerIndexFieldNumber = 4,
    kClientIndexFieldNumber = 3,
  };
  // repeated .NFMsg.EffectData effect_data = 5;
  int effect_data_size() const;
  private:
  int _internal_effect_data_size() const;
  public:
  void clear_effect_data();
  ::NFMsg::EffectData* mutable_effect_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData >*
      mutable_effect_data();
  private:
  const ::NFMsg::EffectData& _internal_effect_data(int index) const;
  ::NFMsg::EffectData* _internal_add_effect_data();
  public:
  const ::NFMsg::EffectData& effect_data(int index) const;
  ::NFMsg::EffectData* add_effect_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData >&
      effect_data() const;

  // bytes skill_id = 2;
  void clear_skill_id();
  const std::string& skill_id() const;
  void set_skill_id(const std::string& value);
  void set_skill_id(std::string&& value);
  void set_skill_id(const char* value);
  void set_skill_id(const void* value, size_t size);
  std::string* mutable_skill_id();
  std::string* release_skill_id();
  void set_allocated_skill_id(std::string* skill_id);
  private:
  const std::string& _internal_skill_id() const;
  void _internal_set_skill_id(const std::string& value);
  std::string* _internal_mutable_skill_id();
  public:

  // .NFMsg.Ident user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::NFMsg::Ident& user() const;
  ::NFMsg::Ident* release_user();
  ::NFMsg::Ident* mutable_user();
  void set_allocated_user(::NFMsg::Ident* user);
  private:
  const ::NFMsg::Ident& _internal_user() const;
  ::NFMsg::Ident* _internal_mutable_user();
  public:

  // int64 server_index = 4;
  void clear_server_index();
  ::PROTOBUF_NAMESPACE_ID::int64 server_index() const;
  void set_server_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_server_index() const;
  void _internal_set_server_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 client_index = 3;
  void clear_client_index();
  ::PROTOBUF_NAMESPACE_ID::int32 client_index() const;
  void set_client_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_index() const;
  void _internal_set_client_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckUseSkill)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData > effect_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_id_;
  ::NFMsg::Ident* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 server_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckSwapScene :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckSwapScene) */ {
 public:
  ReqAckSwapScene();
  virtual ~ReqAckSwapScene();

  ReqAckSwapScene(const ReqAckSwapScene& from);
  ReqAckSwapScene(ReqAckSwapScene&& from) noexcept
    : ReqAckSwapScene() {
    *this = ::std::move(from);
  }

  inline ReqAckSwapScene& operator=(const ReqAckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckSwapScene& operator=(ReqAckSwapScene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckSwapScene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckSwapScene* internal_default_instance() {
    return reinterpret_cast<const ReqAckSwapScene*>(
               &_ReqAckSwapScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReqAckSwapScene& a, ReqAckSwapScene& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckSwapScene* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckSwapScene* New() const final {
    return CreateMaybeMessage<ReqAckSwapScene>(nullptr);
  }

  ReqAckSwapScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckSwapScene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckSwapScene& from);
  void MergeFrom(const ReqAckSwapScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckSwapScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckSwapScene";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 7,
    kTransferTypeFieldNumber = 1,
    kSceneIdFieldNumber = 2,
    kLineIdFieldNumber = 3,
    kXFieldNumber = 4,
    kYFieldNumber = 5,
    kZFieldNumber = 6,
  };
  // bytes data = 7;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 transfer_type = 1;
  void clear_transfer_type();
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_type() const;
  void set_transfer_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transfer_type() const;
  void _internal_set_transfer_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 scene_id = 2;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 line_id = 3;
  void clear_line_id();
  ::PROTOBUF_NAMESPACE_ID::int32 line_id() const;
  void set_line_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line_id() const;
  void _internal_set_line_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float x = 4;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 5;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 6;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckSwapScene)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_id_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckPlayerChat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckPlayerChat) */ {
 public:
  ReqAckPlayerChat();
  virtual ~ReqAckPlayerChat();

  ReqAckPlayerChat(const ReqAckPlayerChat& from);
  ReqAckPlayerChat(ReqAckPlayerChat&& from) noexcept
    : ReqAckPlayerChat() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckPlayerChat& operator=(ReqAckPlayerChat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckPlayerChat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckPlayerChat* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerChat*>(
               &_ReqAckPlayerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReqAckPlayerChat& a, ReqAckPlayerChat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckPlayerChat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerChat* New() const final {
    return CreateMaybeMessage<ReqAckPlayerChat>(nullptr);
  }

  ReqAckPlayerChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckPlayerChat& from);
  void MergeFrom(const ReqAckPlayerChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckPlayerChat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_EGameChatChannel EGameChatChannel;
  static constexpr EGameChatChannel EGCC_GLOBAL =
    ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL;
  static constexpr EGameChatChannel EGCC_CLAN =
    ReqAckPlayerChat_EGameChatChannel_EGCC_CLAN;
  static constexpr EGameChatChannel EGCC_ROOM =
    ReqAckPlayerChat_EGameChatChannel_EGCC_ROOM;
  static constexpr EGameChatChannel EGCC_TEAM =
    ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM;
  static inline bool EGameChatChannel_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatChannel_IsValid(value);
  }
  static constexpr EGameChatChannel EGameChatChannel_MIN =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MIN;
  static constexpr EGameChatChannel EGameChatChannel_MAX =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX;
  static constexpr int EGameChatChannel_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameChatChannel_descriptor() {
    return ReqAckPlayerChat_EGameChatChannel_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameChatChannel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameChatChannel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameChatChannel_Name.");
    return ReqAckPlayerChat_EGameChatChannel_Name(enum_t_value);
  }
  static inline bool EGameChatChannel_Parse(const std::string& name,
      EGameChatChannel* value) {
    return ReqAckPlayerChat_EGameChatChannel_Parse(name, value);
  }

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static constexpr EGameChatType EGCT_TEXT =
    ReqAckPlayerChat_EGameChatType_EGCT_TEXT;
  static constexpr EGameChatType EGCT_VOICE =
    ReqAckPlayerChat_EGameChatType_EGCT_VOICE;
  static constexpr EGameChatType EGCT_EMOJI =
    ReqAckPlayerChat_EGameChatType_EGCT_EMOJI;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static constexpr EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static constexpr EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static constexpr int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameChatType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameChatType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameChatType_Name.");
    return ReqAckPlayerChat_EGameChatType_Name(enum_t_value);
  }
  static inline bool EGameChatType_Parse(const std::string& name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kChatInfoFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
    kChatChannelFieldNumber = 3,
    kChatTypeFieldNumber = 4,
  };
  // bytes player_name = 2;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const void* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // bytes chat_info = 5;
  void clear_chat_info();
  const std::string& chat_info() const;
  void set_chat_info(const std::string& value);
  void set_chat_info(std::string&& value);
  void set_chat_info(const char* value);
  void set_chat_info(const void* value, size_t size);
  std::string* mutable_chat_info();
  std::string* release_chat_info();
  void set_allocated_chat_info(std::string* chat_info);
  private:
  const std::string& _internal_chat_info() const;
  void _internal_set_chat_info(const std::string& value);
  std::string* _internal_mutable_chat_info();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:

  // .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
  void clear_chat_channel();
  ::NFMsg::ReqAckPlayerChat_EGameChatChannel chat_channel() const;
  void set_chat_channel(::NFMsg::ReqAckPlayerChat_EGameChatChannel value);
  private:
  ::NFMsg::ReqAckPlayerChat_EGameChatChannel _internal_chat_channel() const;
  void _internal_set_chat_channel(::NFMsg::ReqAckPlayerChat_EGameChatChannel value);
  public:

  // .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
  void clear_chat_type();
  ::NFMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  void set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value);
  private:
  ::NFMsg::ReqAckPlayerChat_EGameChatType _internal_chat_type() const;
  void _internal_set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckPlayerChat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_info_;
  ::NFMsg::Ident* player_id_;
  int chat_channel_;
  int chat_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ModelSyncUnit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ModelSyncUnit) */ {
 public:
  ModelSyncUnit();
  virtual ~ModelSyncUnit();

  ModelSyncUnit(const ModelSyncUnit& from);
  ModelSyncUnit(ModelSyncUnit&& from) noexcept
    : ModelSyncUnit() {
    *this = ::std::move(from);
  }

  inline ModelSyncUnit& operator=(const ModelSyncUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelSyncUnit& operator=(ModelSyncUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelSyncUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelSyncUnit* internal_default_instance() {
    return reinterpret_cast<const ModelSyncUnit*>(
               &_ModelSyncUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ModelSyncUnit& a, ModelSyncUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelSyncUnit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelSyncUnit* New() const final {
    return CreateMaybeMessage<ModelSyncUnit>(nullptr);
  }

  ModelSyncUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelSyncUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelSyncUnit& from);
  void MergeFrom(const ModelSyncUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelSyncUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ModelSyncUnit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawFieldNumber = 1,
  };
  // bytes raw = 1;
  void clear_raw();
  const std::string& raw() const;
  void set_raw(const std::string& value);
  void set_raw(std::string&& value);
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  std::string* mutable_raw();
  std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ModelSyncUnit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckModelSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckModelSync) */ {
 public:
  ReqAckModelSync();
  virtual ~ReqAckModelSync();

  ReqAckModelSync(const ReqAckModelSync& from);
  ReqAckModelSync(ReqAckModelSync&& from) noexcept
    : ReqAckModelSync() {
    *this = ::std::move(from);
  }

  inline ReqAckModelSync& operator=(const ReqAckModelSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckModelSync& operator=(ReqAckModelSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckModelSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckModelSync* internal_default_instance() {
    return reinterpret_cast<const ReqAckModelSync*>(
               &_ReqAckModelSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReqAckModelSync& a, ReqAckModelSync& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckModelSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckModelSync* New() const final {
    return CreateMaybeMessage<ReqAckModelSync>(nullptr);
  }

  ReqAckModelSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckModelSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckModelSync& from);
  void MergeFrom(const ReqAckModelSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckModelSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckModelSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kNameFieldNumber = 4,
    kSyncUnitFieldNumber = 2,
    kSequenceFieldNumber = 1,
  };
  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bytes name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .NFMsg.ModelSyncUnit sync_unit = 2;
  bool has_sync_unit() const;
  private:
  bool _internal_has_sync_unit() const;
  public:
  void clear_sync_unit();
  const ::NFMsg::ModelSyncUnit& sync_unit() const;
  ::NFMsg::ModelSyncUnit* release_sync_unit();
  ::NFMsg::ModelSyncUnit* mutable_sync_unit();
  void set_allocated_sync_unit(::NFMsg::ModelSyncUnit* sync_unit);
  private:
  const ::NFMsg::ModelSyncUnit& _internal_sync_unit() const;
  ::NFMsg::ModelSyncUnit* _internal_mutable_sync_unit();
  public:

  // int32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckModelSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::NFMsg::ModelSyncUnit* sync_unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ModelInfoUnit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ModelInfoUnit) */ {
 public:
  ModelInfoUnit();
  virtual ~ModelInfoUnit();

  ModelInfoUnit(const ModelInfoUnit& from);
  ModelInfoUnit(ModelInfoUnit&& from) noexcept
    : ModelInfoUnit() {
    *this = ::std::move(from);
  }

  inline ModelInfoUnit& operator=(const ModelInfoUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelInfoUnit& operator=(ModelInfoUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelInfoUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelInfoUnit* internal_default_instance() {
    return reinterpret_cast<const ModelInfoUnit*>(
               &_ModelInfoUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ModelInfoUnit& a, ModelInfoUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelInfoUnit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelInfoUnit* New() const final {
    return CreateMaybeMessage<ModelInfoUnit>(nullptr);
  }

  ModelInfoUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelInfoUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelInfoUnit& from);
  void MergeFrom(const ModelInfoUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInfoUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ModelInfoUnit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNoteFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes note = 2;
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const void* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);
  private:
  const std::string& _internal_note() const;
  void _internal_set_note(const std::string& value);
  std::string* _internal_mutable_note();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ModelInfoUnit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckModelInfoList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckModelInfoList) */ {
 public:
  ReqAckModelInfoList();
  virtual ~ReqAckModelInfoList();

  ReqAckModelInfoList(const ReqAckModelInfoList& from);
  ReqAckModelInfoList(ReqAckModelInfoList&& from) noexcept
    : ReqAckModelInfoList() {
    *this = ::std::move(from);
  }

  inline ReqAckModelInfoList& operator=(const ReqAckModelInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckModelInfoList& operator=(ReqAckModelInfoList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckModelInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckModelInfoList* internal_default_instance() {
    return reinterpret_cast<const ReqAckModelInfoList*>(
               &_ReqAckModelInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReqAckModelInfoList& a, ReqAckModelInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckModelInfoList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckModelInfoList* New() const final {
    return CreateMaybeMessage<ReqAckModelInfoList>(nullptr);
  }

  ReqAckModelInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckModelInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckModelInfoList& from);
  void MergeFrom(const ReqAckModelInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckModelInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckModelInfoList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 5,
    kMsgFieldNumber = 2,
    kClientFieldNumber = 1,
    kNumFieldNumber = 3,
    kCurFieldNumber = 4,
  };
  // repeated .NFMsg.ModelInfoUnit info_list = 5;
  int info_list_size() const;
  private:
  int _internal_info_list_size() const;
  public:
  void clear_info_list();
  ::NFMsg::ModelInfoUnit* mutable_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelInfoUnit >*
      mutable_info_list();
  private:
  const ::NFMsg::ModelInfoUnit& _internal_info_list(int index) const;
  ::NFMsg::ModelInfoUnit* _internal_add_info_list();
  public:
  const ::NFMsg::ModelInfoUnit& info_list(int index) const;
  ::NFMsg::ModelInfoUnit* add_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelInfoUnit >&
      info_list() const;

  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 client = 1;
  void clear_client();
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client() const;
  void _internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num = 3;
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cur = 4;
  void clear_cur();
  ::PROTOBUF_NAMESPACE_ID::int32 cur() const;
  void set_cur(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur() const;
  void _internal_set_cur(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckModelInfoList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelInfoUnit > info_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckModelTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckModelTarget) */ {
 public:
  ReqAckModelTarget();
  virtual ~ReqAckModelTarget();

  ReqAckModelTarget(const ReqAckModelTarget& from);
  ReqAckModelTarget(ReqAckModelTarget&& from) noexcept
    : ReqAckModelTarget() {
    *this = ::std::move(from);
  }

  inline ReqAckModelTarget& operator=(const ReqAckModelTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckModelTarget& operator=(ReqAckModelTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckModelTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckModelTarget* internal_default_instance() {
    return reinterpret_cast<const ReqAckModelTarget*>(
               &_ReqAckModelTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReqAckModelTarget& a, ReqAckModelTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckModelTarget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckModelTarget* New() const final {
    return CreateMaybeMessage<ReqAckModelTarget>(nullptr);
  }

  ReqAckModelTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckModelTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckModelTarget& from);
  void MergeFrom(const ReqAckModelTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckModelTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckModelTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kSyncUnitFieldNumber = 5,
    kClientFieldNumber = 1,
    kTarFieldNumber = 3,
    kLevelFieldNumber = 4,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .NFMsg.ModelSyncUnit sync_unit = 5;
  bool has_sync_unit() const;
  private:
  bool _internal_has_sync_unit() const;
  public:
  void clear_sync_unit();
  const ::NFMsg::ModelSyncUnit& sync_unit() const;
  ::NFMsg::ModelSyncUnit* release_sync_unit();
  ::NFMsg::ModelSyncUnit* mutable_sync_unit();
  void set_allocated_sync_unit(::NFMsg::ModelSyncUnit* sync_unit);
  private:
  const ::NFMsg::ModelSyncUnit& _internal_sync_unit() const;
  ::NFMsg::ModelSyncUnit* _internal_mutable_sync_unit();
  public:

  // int32 client = 1;
  void clear_client();
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client() const;
  void _internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tar = 3;
  void clear_tar();
  ::PROTOBUF_NAMESPACE_ID::int32 tar() const;
  void set_tar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tar() const;
  void _internal_set_tar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 4;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckModelTarget)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::NFMsg::ModelSyncUnit* sync_unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  ::PROTOBUF_NAMESPACE_ID::int32 tar_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckModelSwitch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckModelSwitch) */ {
 public:
  ReqAckModelSwitch();
  virtual ~ReqAckModelSwitch();

  ReqAckModelSwitch(const ReqAckModelSwitch& from);
  ReqAckModelSwitch(ReqAckModelSwitch&& from) noexcept
    : ReqAckModelSwitch() {
    *this = ::std::move(from);
  }

  inline ReqAckModelSwitch& operator=(const ReqAckModelSwitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckModelSwitch& operator=(ReqAckModelSwitch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckModelSwitch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckModelSwitch* internal_default_instance() {
    return reinterpret_cast<const ReqAckModelSwitch*>(
               &_ReqAckModelSwitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReqAckModelSwitch& a, ReqAckModelSwitch& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckModelSwitch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckModelSwitch* New() const final {
    return CreateMaybeMessage<ReqAckModelSwitch>(nullptr);
  }

  ReqAckModelSwitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckModelSwitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckModelSwitch& from);
  void MergeFrom(const ReqAckModelSwitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckModelSwitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckModelSwitch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kClientFieldNumber = 1,
    kTarFieldNumber = 3,
  };
  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 client = 1;
  void clear_client();
  ::PROTOBUF_NAMESPACE_ID::int32 client() const;
  void set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client() const;
  void _internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 tar = 3;
  void clear_tar();
  ::PROTOBUF_NAMESPACE_ID::int32 tar() const;
  void set_tar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tar() const;
  void _internal_set_tar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckModelSwitch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_;
  ::PROTOBUF_NAMESPACE_ID::int32 tar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ModelViewSyncUnit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ModelViewSyncUnit) */ {
 public:
  ModelViewSyncUnit();
  virtual ~ModelViewSyncUnit();

  ModelViewSyncUnit(const ModelViewSyncUnit& from);
  ModelViewSyncUnit(ModelViewSyncUnit&& from) noexcept
    : ModelViewSyncUnit() {
    *this = ::std::move(from);
  }

  inline ModelViewSyncUnit& operator=(const ModelViewSyncUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelViewSyncUnit& operator=(ModelViewSyncUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelViewSyncUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelViewSyncUnit* internal_default_instance() {
    return reinterpret_cast<const ModelViewSyncUnit*>(
               &_ModelViewSyncUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ModelViewSyncUnit& a, ModelViewSyncUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelViewSyncUnit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelViewSyncUnit* New() const final {
    return CreateMaybeMessage<ModelViewSyncUnit>(nullptr);
  }

  ModelViewSyncUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelViewSyncUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelViewSyncUnit& from);
  void MergeFrom(const ModelViewSyncUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelViewSyncUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ModelViewSyncUnit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ModelViewSyncUnit_EViewPlayerType EViewPlayerType;
  static constexpr EViewPlayerType EVST_PC =
    ModelViewSyncUnit_EViewPlayerType_EVST_PC;
  static constexpr EViewPlayerType EVST_HOLOLENS =
    ModelViewSyncUnit_EViewPlayerType_EVST_HOLOLENS;
  static inline bool EViewPlayerType_IsValid(int value) {
    return ModelViewSyncUnit_EViewPlayerType_IsValid(value);
  }
  static constexpr EViewPlayerType EViewPlayerType_MIN =
    ModelViewSyncUnit_EViewPlayerType_EViewPlayerType_MIN;
  static constexpr EViewPlayerType EViewPlayerType_MAX =
    ModelViewSyncUnit_EViewPlayerType_EViewPlayerType_MAX;
  static constexpr int EViewPlayerType_ARRAYSIZE =
    ModelViewSyncUnit_EViewPlayerType_EViewPlayerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EViewPlayerType_descriptor() {
    return ModelViewSyncUnit_EViewPlayerType_descriptor();
  }
  template<typename T>
  static inline const std::string& EViewPlayerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EViewPlayerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EViewPlayerType_Name.");
    return ModelViewSyncUnit_EViewPlayerType_Name(enum_t_value);
  }
  static inline bool EViewPlayerType_Parse(const std::string& name,
      EViewPlayerType* value) {
    return ModelViewSyncUnit_EViewPlayerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCameraPosFieldNumber = 3,
    kCameraRotFieldNumber = 4,
    kModelPosFieldNumber = 5,
    kModelRotFieldNumber = 6,
    kModelScaleFieldNumber = 7,
    kPlayerTypeFieldNumber = 2,
  };
  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:

  // .NFMsg.Vector3 camera_pos = 3;
  bool has_camera_pos() const;
  private:
  bool _internal_has_camera_pos() const;
  public:
  void clear_camera_pos();
  const ::NFMsg::Vector3& camera_pos() const;
  ::NFMsg::Vector3* release_camera_pos();
  ::NFMsg::Vector3* mutable_camera_pos();
  void set_allocated_camera_pos(::NFMsg::Vector3* camera_pos);
  private:
  const ::NFMsg::Vector3& _internal_camera_pos() const;
  ::NFMsg::Vector3* _internal_mutable_camera_pos();
  public:

  // .NFMsg.Vector3 camera_rot = 4;
  bool has_camera_rot() const;
  private:
  bool _internal_has_camera_rot() const;
  public:
  void clear_camera_rot();
  const ::NFMsg::Vector3& camera_rot() const;
  ::NFMsg::Vector3* release_camera_rot();
  ::NFMsg::Vector3* mutable_camera_rot();
  void set_allocated_camera_rot(::NFMsg::Vector3* camera_rot);
  private:
  const ::NFMsg::Vector3& _internal_camera_rot() const;
  ::NFMsg::Vector3* _internal_mutable_camera_rot();
  public:

  // .NFMsg.Vector3 model_pos = 5;
  bool has_model_pos() const;
  private:
  bool _internal_has_model_pos() const;
  public:
  void clear_model_pos();
  const ::NFMsg::Vector3& model_pos() const;
  ::NFMsg::Vector3* release_model_pos();
  ::NFMsg::Vector3* mutable_model_pos();
  void set_allocated_model_pos(::NFMsg::Vector3* model_pos);
  private:
  const ::NFMsg::Vector3& _internal_model_pos() const;
  ::NFMsg::Vector3* _internal_mutable_model_pos();
  public:

  // .NFMsg.Vector3 model_rot = 6;
  bool has_model_rot() const;
  private:
  bool _internal_has_model_rot() const;
  public:
  void clear_model_rot();
  const ::NFMsg::Vector3& model_rot() const;
  ::NFMsg::Vector3* release_model_rot();
  ::NFMsg::Vector3* mutable_model_rot();
  void set_allocated_model_rot(::NFMsg::Vector3* model_rot);
  private:
  const ::NFMsg::Vector3& _internal_model_rot() const;
  ::NFMsg::Vector3* _internal_mutable_model_rot();
  public:

  // .NFMsg.Vector3 model_scale = 7;
  bool has_model_scale() const;
  private:
  bool _internal_has_model_scale() const;
  public:
  void clear_model_scale();
  const ::NFMsg::Vector3& model_scale() const;
  ::NFMsg::Vector3* release_model_scale();
  ::NFMsg::Vector3* mutable_model_scale();
  void set_allocated_model_scale(::NFMsg::Vector3* model_scale);
  private:
  const ::NFMsg::Vector3& _internal_model_scale() const;
  ::NFMsg::Vector3* _internal_mutable_model_scale();
  public:

  // .NFMsg.ModelViewSyncUnit.EViewPlayerType player_type = 2;
  void clear_player_type();
  ::NFMsg::ModelViewSyncUnit_EViewPlayerType player_type() const;
  void set_player_type(::NFMsg::ModelViewSyncUnit_EViewPlayerType value);
  private:
  ::NFMsg::ModelViewSyncUnit_EViewPlayerType _internal_player_type() const;
  void _internal_set_player_type(::NFMsg::ModelViewSyncUnit_EViewPlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ModelViewSyncUnit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NFMsg::Ident* player_id_;
  ::NFMsg::Vector3* camera_pos_;
  ::NFMsg::Vector3* camera_rot_;
  ::NFMsg::Vector3* model_pos_;
  ::NFMsg::Vector3* model_rot_;
  ::NFMsg::Vector3* model_scale_;
  int player_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckModelViewSync :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckModelViewSync) */ {
 public:
  ReqAckModelViewSync();
  virtual ~ReqAckModelViewSync();

  ReqAckModelViewSync(const ReqAckModelViewSync& from);
  ReqAckModelViewSync(ReqAckModelViewSync&& from) noexcept
    : ReqAckModelViewSync() {
    *this = ::std::move(from);
  }

  inline ReqAckModelViewSync& operator=(const ReqAckModelViewSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckModelViewSync& operator=(ReqAckModelViewSync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckModelViewSync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckModelViewSync* internal_default_instance() {
    return reinterpret_cast<const ReqAckModelViewSync*>(
               &_ReqAckModelViewSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReqAckModelViewSync& a, ReqAckModelViewSync& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckModelViewSync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckModelViewSync* New() const final {
    return CreateMaybeMessage<ReqAckModelViewSync>(nullptr);
  }

  ReqAckModelViewSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckModelViewSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckModelViewSync& from);
  void MergeFrom(const ReqAckModelViewSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckModelViewSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckModelViewSync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kSyncUnitFieldNumber = 2,
    kSequenceFieldNumber = 1,
  };
  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .NFMsg.ModelViewSyncUnit sync_unit = 2;
  bool has_sync_unit() const;
  private:
  bool _internal_has_sync_unit() const;
  public:
  void clear_sync_unit();
  const ::NFMsg::ModelViewSyncUnit& sync_unit() const;
  ::NFMsg::ModelViewSyncUnit* release_sync_unit();
  ::NFMsg::ModelViewSyncUnit* mutable_sync_unit();
  void set_allocated_sync_unit(::NFMsg::ModelViewSyncUnit* sync_unit);
  private:
  const ::NFMsg::ModelViewSyncUnit& _internal_sync_unit() const;
  ::NFMsg::ModelViewSyncUnit* _internal_mutable_sync_unit();
  public:

  // int32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckModelViewSync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::NFMsg::ModelViewSyncUnit* sync_unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckModelView :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NFMsg.ReqAckModelView) */ {
 public:
  ReqAckModelView();
  virtual ~ReqAckModelView();

  ReqAckModelView(const ReqAckModelView& from);
  ReqAckModelView(ReqAckModelView&& from) noexcept
    : ReqAckModelView() {
    *this = ::std::move(from);
  }

  inline ReqAckModelView& operator=(const ReqAckModelView& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckModelView& operator=(ReqAckModelView&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqAckModelView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqAckModelView* internal_default_instance() {
    return reinterpret_cast<const ReqAckModelView*>(
               &_ReqAckModelView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ReqAckModelView& a, ReqAckModelView& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckModelView* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckModelView* New() const final {
    return CreateMaybeMessage<ReqAckModelView>(nullptr);
  }

  ReqAckModelView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckModelView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckModelView& from);
  void MergeFrom(const ReqAckModelView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckModelView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NFMsg.ReqAckModelView";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_NFMsgShare_2eproto);
    return ::descriptor_table_NFMsgShare_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncUnitFieldNumber = 2,
    kMsgFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .NFMsg.ModelViewSyncUnit sync_unit = 2;
  int sync_unit_size() const;
  private:
  int _internal_sync_unit_size() const;
  public:
  void clear_sync_unit();
  ::NFMsg::ModelViewSyncUnit* mutable_sync_unit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelViewSyncUnit >*
      mutable_sync_unit();
  private:
  const ::NFMsg::ModelViewSyncUnit& _internal_sync_unit(int index) const;
  ::NFMsg::ModelViewSyncUnit* _internal_add_sync_unit();
  public:
  const ::NFMsg::ModelViewSyncUnit& sync_unit(int index) const;
  ::NFMsg::ModelViewSyncUnit* add_sync_unit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelViewSyncUnit >&
      sync_unit() const;

  // bytes msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .NFMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::NFMsg::Ident& player_id() const;
  ::NFMsg::Ident* release_player_id();
  ::NFMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::NFMsg::Ident* player_id);
  private:
  const ::NFMsg::Ident& _internal_player_id() const;
  ::NFMsg::Ident* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:NFMsg.ReqAckModelView)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelViewSyncUnit > sync_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::NFMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_NFMsgShare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqEnterGameServer

// .NFMsg.Ident id = 1;
inline bool ReqEnterGameServer::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool ReqEnterGameServer::has_id() const {
  return _internal_has_id();
}
inline const ::NFMsg::Ident& ReqEnterGameServer::_internal_id() const {
  const ::NFMsg::Ident* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqEnterGameServer::id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.id)
  return _internal_id();
}
inline ::NFMsg::Ident* ReqEnterGameServer::release_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.id)
  
  ::NFMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqEnterGameServer::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    id_ = p;
  }
  return id_;
}
inline ::NFMsg::Ident* ReqEnterGameServer::mutable_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.id)
  return _internal_mutable_id();
}
inline void ReqEnterGameServer::set_allocated_id(::NFMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.id)
}

// bytes account = 2;
inline void ReqEnterGameServer::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqEnterGameServer::account() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.account)
  return _internal_account();
}
inline void ReqEnterGameServer::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.account)
}
inline std::string* ReqEnterGameServer::mutable_account() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.account)
  return _internal_mutable_account();
}
inline const std::string& ReqEnterGameServer::_internal_account() const {
  return account_.GetNoArena();
}
inline void ReqEnterGameServer::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqEnterGameServer::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqEnterGameServer.account)
}
inline std::string* ReqEnterGameServer::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqEnterGameServer::release_account() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.account)
}

// int32 game_id = 3;
inline void ReqEnterGameServer::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqEnterGameServer::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqEnterGameServer::game_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.game_id)
  return _internal_game_id();
}
inline void ReqEnterGameServer::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void ReqEnterGameServer::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.game_id)
}

// bytes name = 4;
inline void ReqEnterGameServer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqEnterGameServer::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqEnterGameServer.name)
  return _internal_name();
}
inline void ReqEnterGameServer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqEnterGameServer.name)
}
inline std::string* ReqEnterGameServer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqEnterGameServer.name)
  return _internal_mutable_name();
}
inline const std::string& ReqEnterGameServer::_internal_name() const {
  return name_.GetNoArena();
}
inline void ReqEnterGameServer::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqEnterGameServer::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqEnterGameServer.name)
}
inline void ReqEnterGameServer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqEnterGameServer.name)
}
inline void ReqEnterGameServer::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqEnterGameServer.name)
}
inline std::string* ReqEnterGameServer::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqEnterGameServer::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqEnterGameServer.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqEnterGameServer.name)
}

// -------------------------------------------------------------------

// ReqAckEnterGameSuccess

// int32 arg = 1;
inline void ReqAckEnterGameSuccess::clear_arg() {
  arg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckEnterGameSuccess::_internal_arg() const {
  return arg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckEnterGameSuccess::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckEnterGameSuccess.arg)
  return _internal_arg();
}
inline void ReqAckEnterGameSuccess::_internal_set_arg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg_ = value;
}
inline void ReqAckEnterGameSuccess::set_arg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckEnterGameSuccess.arg)
}

// -------------------------------------------------------------------

// ReqHeartBeat

// int32 arg = 1;
inline void ReqHeartBeat::clear_arg() {
  arg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqHeartBeat::_internal_arg() const {
  return arg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqHeartBeat::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqHeartBeat.arg)
  return _internal_arg();
}
inline void ReqHeartBeat::_internal_set_arg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg_ = value;
}
inline void ReqHeartBeat::set_arg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqHeartBeat.arg)
}

// -------------------------------------------------------------------

// ReqLeaveGameServer

// int32 arg = 1;
inline void ReqLeaveGameServer::clear_arg() {
  arg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLeaveGameServer::_internal_arg() const {
  return arg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLeaveGameServer::arg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqLeaveGameServer.arg)
  return _internal_arg();
}
inline void ReqLeaveGameServer::_internal_set_arg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  arg_ = value;
}
inline void ReqLeaveGameServer::set_arg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_arg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqLeaveGameServer.arg)
}

// -------------------------------------------------------------------

// PlayerEntryInfo

// .NFMsg.Ident object_guid = 1;
inline bool PlayerEntryInfo::_internal_has_object_guid() const {
  return this != internal_default_instance() && object_guid_ != nullptr;
}
inline bool PlayerEntryInfo::has_object_guid() const {
  return _internal_has_object_guid();
}
inline const ::NFMsg::Ident& PlayerEntryInfo::_internal_object_guid() const {
  const ::NFMsg::Ident* p = object_guid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& PlayerEntryInfo::object_guid() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.object_guid)
  return _internal_object_guid();
}
inline ::NFMsg::Ident* PlayerEntryInfo::release_object_guid() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.object_guid)
  
  ::NFMsg::Ident* temp = object_guid_;
  object_guid_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* PlayerEntryInfo::_internal_mutable_object_guid() {
  
  if (object_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    object_guid_ = p;
  }
  return object_guid_;
}
inline ::NFMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.object_guid)
  return _internal_mutable_object_guid();
}
inline void PlayerEntryInfo::set_allocated_object_guid(::NFMsg::Ident* object_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid_);
  }
  if (object_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_guid, submessage_arena);
    }
    
  } else {
    
  }
  object_guid_ = object_guid;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.object_guid)
}

// float x = 2;
inline void PlayerEntryInfo::clear_x() {
  x_ = 0;
}
inline float PlayerEntryInfo::_internal_x() const {
  return x_;
}
inline float PlayerEntryInfo::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.x)
  return _internal_x();
}
inline void PlayerEntryInfo::_internal_set_x(float value) {
  
  x_ = value;
}
inline void PlayerEntryInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.x)
}

// float y = 3;
inline void PlayerEntryInfo::clear_y() {
  y_ = 0;
}
inline float PlayerEntryInfo::_internal_y() const {
  return y_;
}
inline float PlayerEntryInfo::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.y)
  return _internal_y();
}
inline void PlayerEntryInfo::_internal_set_y(float value) {
  
  y_ = value;
}
inline void PlayerEntryInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.y)
}

// float z = 4;
inline void PlayerEntryInfo::clear_z() {
  z_ = 0;
}
inline float PlayerEntryInfo::_internal_z() const {
  return z_;
}
inline float PlayerEntryInfo::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.z)
  return _internal_z();
}
inline void PlayerEntryInfo::_internal_set_z(float value) {
  
  z_ = value;
}
inline void PlayerEntryInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.z)
}

// int32 career_type = 5;
inline void PlayerEntryInfo::clear_career_type() {
  career_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::_internal_career_type() const {
  return career_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::career_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.career_type)
  return _internal_career_type();
}
inline void PlayerEntryInfo::_internal_set_career_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  career_type_ = value;
}
inline void PlayerEntryInfo::set_career_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_career_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.career_type)
}

// int32 player_state = 6;
inline void PlayerEntryInfo::clear_player_state() {
  player_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::_internal_player_state() const {
  return player_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::player_state() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.player_state)
  return _internal_player_state();
}
inline void PlayerEntryInfo::_internal_set_player_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_state_ = value;
}
inline void PlayerEntryInfo::set_player_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_state(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.player_state)
}

// bytes config_id = 7;
inline void PlayerEntryInfo::clear_config_id() {
  config_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerEntryInfo::config_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.config_id)
  return _internal_config_id();
}
inline void PlayerEntryInfo::set_config_id(const std::string& value) {
  _internal_set_config_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.config_id)
}
inline std::string* PlayerEntryInfo::mutable_config_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.config_id)
  return _internal_mutable_config_id();
}
inline const std::string& PlayerEntryInfo::_internal_config_id() const {
  return config_id_.GetNoArena();
}
inline void PlayerEntryInfo::_internal_set_config_id(const std::string& value) {
  
  config_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerEntryInfo::set_config_id(std::string&& value) {
  
  config_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PlayerEntryInfo.config_id)
}
inline void PlayerEntryInfo::set_config_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  config_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PlayerEntryInfo.config_id)
}
inline void PlayerEntryInfo::set_config_id(const void* value, size_t size) {
  
  config_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PlayerEntryInfo.config_id)
}
inline std::string* PlayerEntryInfo::_internal_mutable_config_id() {
  
  return config_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerEntryInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.config_id)
  
  return config_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_allocated_config_id(std::string* config_id) {
  if (config_id != nullptr) {
    
  } else {
    
  }
  config_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.config_id)
}

// int32 scene_id = 8;
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.scene_id)
  return _internal_scene_id();
}
inline void PlayerEntryInfo::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void PlayerEntryInfo::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.scene_id)
}

// bytes class_id = 9;
inline void PlayerEntryInfo::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayerEntryInfo::class_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.PlayerEntryInfo.class_id)
  return _internal_class_id();
}
inline void PlayerEntryInfo::set_class_id(const std::string& value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.PlayerEntryInfo.class_id)
}
inline std::string* PlayerEntryInfo::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.PlayerEntryInfo.class_id)
  return _internal_mutable_class_id();
}
inline const std::string& PlayerEntryInfo::_internal_class_id() const {
  return class_id_.GetNoArena();
}
inline void PlayerEntryInfo::_internal_set_class_id(const std::string& value) {
  
  class_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlayerEntryInfo::set_class_id(std::string&& value) {
  
  class_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.PlayerEntryInfo.class_id)
}
inline void PlayerEntryInfo::set_class_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  class_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.PlayerEntryInfo.class_id)
}
inline void PlayerEntryInfo::set_class_id(const void* value, size_t size) {
  
  class_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.PlayerEntryInfo.class_id)
}
inline std::string* PlayerEntryInfo::_internal_mutable_class_id() {
  
  return class_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayerEntryInfo::release_class_id() {
  // @@protoc_insertion_point(field_release:NFMsg.PlayerEntryInfo.class_id)
  
  return class_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_allocated_class_id(std::string* class_id) {
  if (class_id != nullptr) {
    
  } else {
    
  }
  class_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PlayerEntryInfo.class_id)
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .NFMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerEntryList::object_list_size() const {
  return _internal_object_list_size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckPlayerEntryList.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckPlayerEntryList.object_list)
  return &object_list_;
}
inline const ::NFMsg::PlayerEntryInfo& AckPlayerEntryList::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::NFMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckPlayerEntryList.object_list)
  return _internal_object_list(index);
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::NFMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.AckPlayerEntryList.object_list)
  return _internal_add_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckPlayerEntryList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated .NFMsg.Ident object_list = 1;
inline int AckPlayerLeaveList::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerLeaveList::object_list_size() const {
  return _internal_object_list_size();
}
inline ::NFMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.AckPlayerLeaveList.object_list)
  return &object_list_;
}
inline const ::NFMsg::Ident& AckPlayerLeaveList::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::NFMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.AckPlayerLeaveList.object_list)
  return _internal_object_list(index);
}
inline ::NFMsg::Ident* AckPlayerLeaveList::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::NFMsg::Ident* AckPlayerLeaveList::add_object_list() {
  // @@protoc_insertion_point(field_add:NFMsg.AckPlayerLeaveList.object_list)
  return _internal_add_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.AckPlayerLeaveList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// PosSyncUnit

// .NFMsg.Ident mover = 1;
inline bool PosSyncUnit::_internal_has_mover() const {
  return this != internal_default_instance() && mover_ != nullptr;
}
inline bool PosSyncUnit::has_mover() const {
  return _internal_has_mover();
}
inline const ::NFMsg::Ident& PosSyncUnit::_internal_mover() const {
  const ::NFMsg::Ident* p = mover_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& PosSyncUnit::mover() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.mover)
  return _internal_mover();
}
inline ::NFMsg::Ident* PosSyncUnit::release_mover() {
  // @@protoc_insertion_point(field_release:NFMsg.PosSyncUnit.mover)
  
  ::NFMsg::Ident* temp = mover_;
  mover_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* PosSyncUnit::_internal_mutable_mover() {
  
  if (mover_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    mover_ = p;
  }
  return mover_;
}
inline ::NFMsg::Ident* PosSyncUnit::mutable_mover() {
  // @@protoc_insertion_point(field_mutable:NFMsg.PosSyncUnit.mover)
  return _internal_mutable_mover();
}
inline void PosSyncUnit::set_allocated_mover(::NFMsg::Ident* mover) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mover_);
  }
  if (mover) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mover = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mover, submessage_arena);
    }
    
  } else {
    
  }
  mover_ = mover;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PosSyncUnit.mover)
}

// .NFMsg.Vector3 pos = 2;
inline bool PosSyncUnit::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PosSyncUnit::has_pos() const {
  return _internal_has_pos();
}
inline const ::NFMsg::Vector3& PosSyncUnit::_internal_pos() const {
  const ::NFMsg::Vector3* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& PosSyncUnit::pos() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.pos)
  return _internal_pos();
}
inline ::NFMsg::Vector3* PosSyncUnit::release_pos() {
  // @@protoc_insertion_point(field_release:NFMsg.PosSyncUnit.pos)
  
  ::NFMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* PosSyncUnit::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::NFMsg::Vector3* PosSyncUnit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:NFMsg.PosSyncUnit.pos)
  return _internal_mutable_pos();
}
inline void PosSyncUnit::set_allocated_pos(::NFMsg::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PosSyncUnit.pos)
}

// .NFMsg.Vector3 orientation = 3;
inline bool PosSyncUnit::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool PosSyncUnit::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::NFMsg::Vector3& PosSyncUnit::_internal_orientation() const {
  const ::NFMsg::Vector3* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& PosSyncUnit::orientation() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.orientation)
  return _internal_orientation();
}
inline ::NFMsg::Vector3* PosSyncUnit::release_orientation() {
  // @@protoc_insertion_point(field_release:NFMsg.PosSyncUnit.orientation)
  
  ::NFMsg::Vector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* PosSyncUnit::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::NFMsg::Vector3* PosSyncUnit::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:NFMsg.PosSyncUnit.orientation)
  return _internal_mutable_orientation();
}
inline void PosSyncUnit::set_allocated_orientation(::NFMsg::Vector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.PosSyncUnit.orientation)
}

// int32 status = 4;
inline void PosSyncUnit::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosSyncUnit::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosSyncUnit::status() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.status)
  return _internal_status();
}
inline void PosSyncUnit::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void PosSyncUnit::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:NFMsg.PosSyncUnit.status)
}

// .NFMsg.PosSyncUnit.EMoveType type = 5;
inline void PosSyncUnit::clear_type() {
  type_ = 0;
}
inline ::NFMsg::PosSyncUnit_EMoveType PosSyncUnit::_internal_type() const {
  return static_cast< ::NFMsg::PosSyncUnit_EMoveType >(type_);
}
inline ::NFMsg::PosSyncUnit_EMoveType PosSyncUnit::type() const {
  // @@protoc_insertion_point(field_get:NFMsg.PosSyncUnit.type)
  return _internal_type();
}
inline void PosSyncUnit::_internal_set_type(::NFMsg::PosSyncUnit_EMoveType value) {
  
  type_ = value;
}
inline void PosSyncUnit::set_type(::NFMsg::PosSyncUnit_EMoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.PosSyncUnit.type)
}

// -------------------------------------------------------------------

// ReqAckPlayerPosSync

// int32 sequence = 1;
inline void ReqAckPlayerPosSync::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckPlayerPosSync::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckPlayerPosSync::sequence() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.sequence)
  return _internal_sequence();
}
inline void ReqAckPlayerPosSync::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void ReqAckPlayerPosSync::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerPosSync.sequence)
}

// repeated .NFMsg.PosSyncUnit sync_unit = 2;
inline int ReqAckPlayerPosSync::_internal_sync_unit_size() const {
  return sync_unit_.size();
}
inline int ReqAckPlayerPosSync::sync_unit_size() const {
  return _internal_sync_unit_size();
}
inline void ReqAckPlayerPosSync::clear_sync_unit() {
  sync_unit_.Clear();
}
inline ::NFMsg::PosSyncUnit* ReqAckPlayerPosSync::mutable_sync_unit(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return sync_unit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit >*
ReqAckPlayerPosSync::mutable_sync_unit() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return &sync_unit_;
}
inline const ::NFMsg::PosSyncUnit& ReqAckPlayerPosSync::_internal_sync_unit(int index) const {
  return sync_unit_.Get(index);
}
inline const ::NFMsg::PosSyncUnit& ReqAckPlayerPosSync::sync_unit(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return _internal_sync_unit(index);
}
inline ::NFMsg::PosSyncUnit* ReqAckPlayerPosSync::_internal_add_sync_unit() {
  return sync_unit_.Add();
}
inline ::NFMsg::PosSyncUnit* ReqAckPlayerPosSync::add_sync_unit() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return _internal_add_sync_unit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::PosSyncUnit >&
ReqAckPlayerPosSync::sync_unit() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckPlayerPosSync.sync_unit)
  return sync_unit_;
}

// -------------------------------------------------------------------

// EffectData

// .NFMsg.Ident effect_ident = 1;
inline bool EffectData::_internal_has_effect_ident() const {
  return this != internal_default_instance() && effect_ident_ != nullptr;
}
inline bool EffectData::has_effect_ident() const {
  return _internal_has_effect_ident();
}
inline const ::NFMsg::Ident& EffectData::_internal_effect_ident() const {
  const ::NFMsg::Ident* p = effect_ident_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& EffectData::effect_ident() const {
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_ident)
  return _internal_effect_ident();
}
inline ::NFMsg::Ident* EffectData::release_effect_ident() {
  // @@protoc_insertion_point(field_release:NFMsg.EffectData.effect_ident)
  
  ::NFMsg::Ident* temp = effect_ident_;
  effect_ident_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* EffectData::_internal_mutable_effect_ident() {
  
  if (effect_ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    effect_ident_ = p;
  }
  return effect_ident_;
}
inline ::NFMsg::Ident* EffectData::mutable_effect_ident() {
  // @@protoc_insertion_point(field_mutable:NFMsg.EffectData.effect_ident)
  return _internal_mutable_effect_ident();
}
inline void EffectData::set_allocated_effect_ident(::NFMsg::Ident* effect_ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(effect_ident_);
  }
  if (effect_ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      effect_ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_ident, submessage_arena);
    }
    
  } else {
    
  }
  effect_ident_ = effect_ident;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.EffectData.effect_ident)
}

// int32 effect_value = 2;
inline void EffectData::clear_effect_value() {
  effect_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectData::_internal_effect_value() const {
  return effect_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EffectData::effect_value() const {
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_value)
  return _internal_effect_value();
}
inline void EffectData::_internal_set_effect_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  effect_value_ = value;
}
inline void EffectData::set_effect_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_effect_value(value);
  // @@protoc_insertion_point(field_set:NFMsg.EffectData.effect_value)
}

// .NFMsg.EffectData.EResultType effect_rlt = 3;
inline void EffectData::clear_effect_rlt() {
  effect_rlt_ = 0;
}
inline ::NFMsg::EffectData_EResultType EffectData::_internal_effect_rlt() const {
  return static_cast< ::NFMsg::EffectData_EResultType >(effect_rlt_);
}
inline ::NFMsg::EffectData_EResultType EffectData::effect_rlt() const {
  // @@protoc_insertion_point(field_get:NFMsg.EffectData.effect_rlt)
  return _internal_effect_rlt();
}
inline void EffectData::_internal_set_effect_rlt(::NFMsg::EffectData_EResultType value) {
  
  effect_rlt_ = value;
}
inline void EffectData::set_effect_rlt(::NFMsg::EffectData_EResultType value) {
  _internal_set_effect_rlt(value);
  // @@protoc_insertion_point(field_set:NFMsg.EffectData.effect_rlt)
}

// -------------------------------------------------------------------

// ReqAckUseSkill

// .NFMsg.Ident user = 1;
inline bool ReqAckUseSkill::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool ReqAckUseSkill::has_user() const {
  return _internal_has_user();
}
inline const ::NFMsg::Ident& ReqAckUseSkill::_internal_user() const {
  const ::NFMsg::Ident* p = user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckUseSkill::user() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.user)
  return _internal_user();
}
inline ::NFMsg::Ident* ReqAckUseSkill::release_user() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseSkill.user)
  
  ::NFMsg::Ident* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckUseSkill::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    user_ = p;
  }
  return user_;
}
inline ::NFMsg::Ident* ReqAckUseSkill::mutable_user() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.user)
  return _internal_mutable_user();
}
inline void ReqAckUseSkill::set_allocated_user(::NFMsg::Ident* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseSkill.user)
}

// bytes skill_id = 2;
inline void ReqAckUseSkill::clear_skill_id() {
  skill_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckUseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.skill_id)
  return _internal_skill_id();
}
inline void ReqAckUseSkill::set_skill_id(const std::string& value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckUseSkill.skill_id)
}
inline std::string* ReqAckUseSkill::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.skill_id)
  return _internal_mutable_skill_id();
}
inline const std::string& ReqAckUseSkill::_internal_skill_id() const {
  return skill_id_.GetNoArena();
}
inline void ReqAckUseSkill::_internal_set_skill_id(const std::string& value) {
  
  skill_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckUseSkill::set_skill_id(std::string&& value) {
  
  skill_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckUseSkill.skill_id)
}
inline void ReqAckUseSkill::set_skill_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  skill_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckUseSkill.skill_id)
}
inline void ReqAckUseSkill::set_skill_id(const void* value, size_t size) {
  
  skill_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckUseSkill.skill_id)
}
inline std::string* ReqAckUseSkill::_internal_mutable_skill_id() {
  
  return skill_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckUseSkill::release_skill_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckUseSkill.skill_id)
  
  return skill_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckUseSkill::set_allocated_skill_id(std::string* skill_id) {
  if (skill_id != nullptr) {
    
  } else {
    
  }
  skill_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_id);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckUseSkill.skill_id)
}

// int32 client_index = 3;
inline void ReqAckUseSkill::clear_client_index() {
  client_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckUseSkill::_internal_client_index() const {
  return client_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckUseSkill::client_index() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.client_index)
  return _internal_client_index();
}
inline void ReqAckUseSkill::_internal_set_client_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_index_ = value;
}
inline void ReqAckUseSkill::set_client_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_index(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckUseSkill.client_index)
}

// int64 server_index = 4;
inline void ReqAckUseSkill::clear_server_index() {
  server_index_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqAckUseSkill::_internal_server_index() const {
  return server_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqAckUseSkill::server_index() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.server_index)
  return _internal_server_index();
}
inline void ReqAckUseSkill::_internal_set_server_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  server_index_ = value;
}
inline void ReqAckUseSkill::set_server_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_server_index(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckUseSkill.server_index)
}

// repeated .NFMsg.EffectData effect_data = 5;
inline int ReqAckUseSkill::_internal_effect_data_size() const {
  return effect_data_.size();
}
inline int ReqAckUseSkill::effect_data_size() const {
  return _internal_effect_data_size();
}
inline void ReqAckUseSkill::clear_effect_data() {
  effect_data_.Clear();
}
inline ::NFMsg::EffectData* ReqAckUseSkill::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData >*
ReqAckUseSkill::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckUseSkill.effect_data)
  return &effect_data_;
}
inline const ::NFMsg::EffectData& ReqAckUseSkill::_internal_effect_data(int index) const {
  return effect_data_.Get(index);
}
inline const ::NFMsg::EffectData& ReqAckUseSkill::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckUseSkill.effect_data)
  return _internal_effect_data(index);
}
inline ::NFMsg::EffectData* ReqAckUseSkill::_internal_add_effect_data() {
  return effect_data_.Add();
}
inline ::NFMsg::EffectData* ReqAckUseSkill::add_effect_data() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckUseSkill.effect_data)
  return _internal_add_effect_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::EffectData >&
ReqAckUseSkill::effect_data() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckUseSkill.effect_data)
  return effect_data_;
}

// -------------------------------------------------------------------

// ReqAckSwapScene

// int32 transfer_type = 1;
inline void ReqAckSwapScene::clear_transfer_type() {
  transfer_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckSwapScene::_internal_transfer_type() const {
  return transfer_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckSwapScene::transfer_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.transfer_type)
  return _internal_transfer_type();
}
inline void ReqAckSwapScene::_internal_set_transfer_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transfer_type_ = value;
}
inline void ReqAckSwapScene::set_transfer_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transfer_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.transfer_type)
}

// int32 scene_id = 2;
inline void ReqAckSwapScene::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckSwapScene::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.scene_id)
  return _internal_scene_id();
}
inline void ReqAckSwapScene::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void ReqAckSwapScene::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.scene_id)
}

// int32 line_id = 3;
inline void ReqAckSwapScene::clear_line_id() {
  line_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckSwapScene::_internal_line_id() const {
  return line_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckSwapScene::line_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.line_id)
  return _internal_line_id();
}
inline void ReqAckSwapScene::_internal_set_line_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_id_ = value;
}
inline void ReqAckSwapScene::set_line_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.line_id)
}

// float x = 4;
inline void ReqAckSwapScene::clear_x() {
  x_ = 0;
}
inline float ReqAckSwapScene::_internal_x() const {
  return x_;
}
inline float ReqAckSwapScene::x() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.x)
  return _internal_x();
}
inline void ReqAckSwapScene::_internal_set_x(float value) {
  
  x_ = value;
}
inline void ReqAckSwapScene::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.x)
}

// float y = 5;
inline void ReqAckSwapScene::clear_y() {
  y_ = 0;
}
inline float ReqAckSwapScene::_internal_y() const {
  return y_;
}
inline float ReqAckSwapScene::y() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.y)
  return _internal_y();
}
inline void ReqAckSwapScene::_internal_set_y(float value) {
  
  y_ = value;
}
inline void ReqAckSwapScene::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.y)
}

// float z = 6;
inline void ReqAckSwapScene::clear_z() {
  z_ = 0;
}
inline float ReqAckSwapScene::_internal_z() const {
  return z_;
}
inline float ReqAckSwapScene::z() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.z)
  return _internal_z();
}
inline void ReqAckSwapScene::_internal_set_z(float value) {
  
  z_ = value;
}
inline void ReqAckSwapScene::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.z)
}

// bytes data = 7;
inline void ReqAckSwapScene::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckSwapScene::data() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckSwapScene.data)
  return _internal_data();
}
inline void ReqAckSwapScene::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckSwapScene.data)
}
inline std::string* ReqAckSwapScene::mutable_data() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckSwapScene.data)
  return _internal_mutable_data();
}
inline const std::string& ReqAckSwapScene::_internal_data() const {
  return data_.GetNoArena();
}
inline void ReqAckSwapScene::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckSwapScene::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckSwapScene.data)
}
inline void ReqAckSwapScene::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckSwapScene.data)
}
inline void ReqAckSwapScene::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckSwapScene.data)
}
inline std::string* ReqAckSwapScene::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckSwapScene::release_data() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckSwapScene.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckSwapScene::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckSwapScene.data)
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// .NFMsg.Ident player_id = 1;
inline bool ReqAckPlayerChat::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAckPlayerChat::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckPlayerChat::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.player_id)
  return _internal_player_id();
}
inline ::NFMsg::Ident* ReqAckPlayerChat::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ReqAckPlayerChat::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAckPlayerChat::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.player_id)
}

// bytes player_name = 2;
inline void ReqAckPlayerChat::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckPlayerChat::player_name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.player_name)
  return _internal_player_name();
}
inline void ReqAckPlayerChat::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.player_name)
}
inline std::string* ReqAckPlayerChat::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& ReqAckPlayerChat::_internal_player_name() const {
  return player_name_.GetNoArena();
}
inline void ReqAckPlayerChat::_internal_set_player_name(const std::string& value) {
  
  player_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckPlayerChat::set_player_name(std::string&& value) {
  
  player_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckPlayerChat.player_name)
}
inline void ReqAckPlayerChat::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckPlayerChat.player_name)
}
inline void ReqAckPlayerChat::set_player_name(const void* value, size_t size) {
  
  player_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckPlayerChat.player_name)
}
inline std::string* ReqAckPlayerChat::_internal_mutable_player_name() {
  
  return player_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckPlayerChat::release_player_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.player_name)
  
  return player_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.player_name)
}

// .NFMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 3;
inline void ReqAckPlayerChat::clear_chat_channel() {
  chat_channel_ = 0;
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::_internal_chat_channel() const {
  return static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatChannel >(chat_channel_);
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::chat_channel() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_channel)
  return _internal_chat_channel();
}
inline void ReqAckPlayerChat::_internal_set_chat_channel(::NFMsg::ReqAckPlayerChat_EGameChatChannel value) {
  
  chat_channel_ = value;
}
inline void ReqAckPlayerChat::set_chat_channel(::NFMsg::ReqAckPlayerChat_EGameChatChannel value) {
  _internal_set_chat_channel(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_channel)
}

// .NFMsg.ReqAckPlayerChat.EGameChatType chat_type = 4;
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::_internal_chat_type() const {
  return static_cast< ::NFMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline ::NFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_type)
  return _internal_chat_type();
}
inline void ReqAckPlayerChat::_internal_set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value) {
  
  chat_type_ = value;
}
inline void ReqAckPlayerChat::set_chat_type(::NFMsg::ReqAckPlayerChat_EGameChatType value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_type)
}

// bytes chat_info = 5;
inline void ReqAckPlayerChat::clear_chat_info() {
  chat_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckPlayerChat::chat_info() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckPlayerChat.chat_info)
  return _internal_chat_info();
}
inline void ReqAckPlayerChat::set_chat_info(const std::string& value) {
  _internal_set_chat_info(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckPlayerChat.chat_info)
}
inline std::string* ReqAckPlayerChat::mutable_chat_info() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckPlayerChat.chat_info)
  return _internal_mutable_chat_info();
}
inline const std::string& ReqAckPlayerChat::_internal_chat_info() const {
  return chat_info_.GetNoArena();
}
inline void ReqAckPlayerChat::_internal_set_chat_info(const std::string& value) {
  
  chat_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckPlayerChat::set_chat_info(std::string&& value) {
  
  chat_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckPlayerChat.chat_info)
}
inline void ReqAckPlayerChat::set_chat_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chat_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckPlayerChat.chat_info)
}
inline void ReqAckPlayerChat::set_chat_info(const void* value, size_t size) {
  
  chat_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckPlayerChat.chat_info)
}
inline std::string* ReqAckPlayerChat::_internal_mutable_chat_info() {
  
  return chat_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckPlayerChat::release_chat_info() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckPlayerChat.chat_info)
  
  return chat_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_allocated_chat_info(std::string* chat_info) {
  if (chat_info != nullptr) {
    
  } else {
    
  }
  chat_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_info);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckPlayerChat.chat_info)
}

// -------------------------------------------------------------------

// ModelSyncUnit

// bytes raw = 1;
inline void ModelSyncUnit::clear_raw() {
  raw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelSyncUnit::raw() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelSyncUnit.raw)
  return _internal_raw();
}
inline void ModelSyncUnit::set_raw(const std::string& value) {
  _internal_set_raw(value);
  // @@protoc_insertion_point(field_set:NFMsg.ModelSyncUnit.raw)
}
inline std::string* ModelSyncUnit::mutable_raw() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelSyncUnit.raw)
  return _internal_mutable_raw();
}
inline const std::string& ModelSyncUnit::_internal_raw() const {
  return raw_.GetNoArena();
}
inline void ModelSyncUnit::_internal_set_raw(const std::string& value) {
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelSyncUnit::set_raw(std::string&& value) {
  
  raw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ModelSyncUnit.raw)
}
inline void ModelSyncUnit::set_raw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ModelSyncUnit.raw)
}
inline void ModelSyncUnit::set_raw(const void* value, size_t size) {
  
  raw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ModelSyncUnit.raw)
}
inline std::string* ModelSyncUnit::_internal_mutable_raw() {
  
  return raw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelSyncUnit::release_raw() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelSyncUnit.raw)
  
  return raw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelSyncUnit::set_allocated_raw(std::string* raw) {
  if (raw != nullptr) {
    
  } else {
    
  }
  raw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelSyncUnit.raw)
}

// -------------------------------------------------------------------

// ReqAckModelSync

// int32 sequence = 1;
inline void ReqAckModelSync::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelSync::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelSync::sequence() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelSync.sequence)
  return _internal_sequence();
}
inline void ReqAckModelSync::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void ReqAckModelSync::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelSync.sequence)
}

// .NFMsg.ModelSyncUnit sync_unit = 2;
inline bool ReqAckModelSync::_internal_has_sync_unit() const {
  return this != internal_default_instance() && sync_unit_ != nullptr;
}
inline bool ReqAckModelSync::has_sync_unit() const {
  return _internal_has_sync_unit();
}
inline void ReqAckModelSync::clear_sync_unit() {
  if (GetArenaNoVirtual() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
}
inline const ::NFMsg::ModelSyncUnit& ReqAckModelSync::_internal_sync_unit() const {
  const ::NFMsg::ModelSyncUnit* p = sync_unit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::ModelSyncUnit*>(
      &::NFMsg::_ModelSyncUnit_default_instance_);
}
inline const ::NFMsg::ModelSyncUnit& ReqAckModelSync::sync_unit() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelSync.sync_unit)
  return _internal_sync_unit();
}
inline ::NFMsg::ModelSyncUnit* ReqAckModelSync::release_sync_unit() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelSync.sync_unit)
  
  ::NFMsg::ModelSyncUnit* temp = sync_unit_;
  sync_unit_ = nullptr;
  return temp;
}
inline ::NFMsg::ModelSyncUnit* ReqAckModelSync::_internal_mutable_sync_unit() {
  
  if (sync_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::ModelSyncUnit>(GetArenaNoVirtual());
    sync_unit_ = p;
  }
  return sync_unit_;
}
inline ::NFMsg::ModelSyncUnit* ReqAckModelSync::mutable_sync_unit() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelSync.sync_unit)
  return _internal_mutable_sync_unit();
}
inline void ReqAckModelSync::set_allocated_sync_unit(::NFMsg::ModelSyncUnit* sync_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sync_unit_;
  }
  if (sync_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_unit, submessage_arena);
    }
    
  } else {
    
  }
  sync_unit_ = sync_unit;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelSync.sync_unit)
}

// bytes msg = 3;
inline void ReqAckModelSync::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckModelSync::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelSync.msg)
  return _internal_msg();
}
inline void ReqAckModelSync::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelSync.msg)
}
inline std::string* ReqAckModelSync::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelSync.msg)
  return _internal_mutable_msg();
}
inline const std::string& ReqAckModelSync::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ReqAckModelSync::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckModelSync::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckModelSync.msg)
}
inline void ReqAckModelSync::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckModelSync.msg)
}
inline void ReqAckModelSync::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckModelSync.msg)
}
inline std::string* ReqAckModelSync::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckModelSync::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelSync.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckModelSync::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelSync.msg)
}

// bytes name = 4;
inline void ReqAckModelSync::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckModelSync::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelSync.name)
  return _internal_name();
}
inline void ReqAckModelSync::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelSync.name)
}
inline std::string* ReqAckModelSync::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelSync.name)
  return _internal_mutable_name();
}
inline const std::string& ReqAckModelSync::_internal_name() const {
  return name_.GetNoArena();
}
inline void ReqAckModelSync::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckModelSync::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckModelSync.name)
}
inline void ReqAckModelSync::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckModelSync.name)
}
inline void ReqAckModelSync::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckModelSync.name)
}
inline std::string* ReqAckModelSync::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckModelSync::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelSync.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckModelSync::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelSync.name)
}

// -------------------------------------------------------------------

// ModelInfoUnit

// bytes name = 1;
inline void ModelInfoUnit::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelInfoUnit::name() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelInfoUnit.name)
  return _internal_name();
}
inline void ModelInfoUnit::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NFMsg.ModelInfoUnit.name)
}
inline std::string* ModelInfoUnit::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelInfoUnit.name)
  return _internal_mutable_name();
}
inline const std::string& ModelInfoUnit::_internal_name() const {
  return name_.GetNoArena();
}
inline void ModelInfoUnit::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelInfoUnit::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ModelInfoUnit.name)
}
inline void ModelInfoUnit::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ModelInfoUnit.name)
}
inline void ModelInfoUnit::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ModelInfoUnit.name)
}
inline std::string* ModelInfoUnit::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelInfoUnit::release_name() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelInfoUnit.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelInfoUnit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelInfoUnit.name)
}

// bytes note = 2;
inline void ModelInfoUnit::clear_note() {
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModelInfoUnit::note() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelInfoUnit.note)
  return _internal_note();
}
inline void ModelInfoUnit::set_note(const std::string& value) {
  _internal_set_note(value);
  // @@protoc_insertion_point(field_set:NFMsg.ModelInfoUnit.note)
}
inline std::string* ModelInfoUnit::mutable_note() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelInfoUnit.note)
  return _internal_mutable_note();
}
inline const std::string& ModelInfoUnit::_internal_note() const {
  return note_.GetNoArena();
}
inline void ModelInfoUnit::_internal_set_note(const std::string& value) {
  
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModelInfoUnit::set_note(std::string&& value) {
  
  note_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ModelInfoUnit.note)
}
inline void ModelInfoUnit::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ModelInfoUnit.note)
}
inline void ModelInfoUnit::set_note(const void* value, size_t size) {
  
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ModelInfoUnit.note)
}
inline std::string* ModelInfoUnit::_internal_mutable_note() {
  
  return note_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModelInfoUnit::release_note() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelInfoUnit.note)
  
  return note_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModelInfoUnit::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelInfoUnit.note)
}

// -------------------------------------------------------------------

// ReqAckModelInfoList

// int32 client = 1;
inline void ReqAckModelInfoList::clear_client() {
  client_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelInfoList::_internal_client() const {
  return client_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelInfoList::client() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelInfoList.client)
  return _internal_client();
}
inline void ReqAckModelInfoList::_internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_ = value;
}
inline void ReqAckModelInfoList::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelInfoList.client)
}

// bytes msg = 2;
inline void ReqAckModelInfoList::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckModelInfoList::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelInfoList.msg)
  return _internal_msg();
}
inline void ReqAckModelInfoList::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelInfoList.msg)
}
inline std::string* ReqAckModelInfoList::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelInfoList.msg)
  return _internal_mutable_msg();
}
inline const std::string& ReqAckModelInfoList::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ReqAckModelInfoList::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckModelInfoList::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckModelInfoList.msg)
}
inline void ReqAckModelInfoList::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckModelInfoList.msg)
}
inline void ReqAckModelInfoList::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckModelInfoList.msg)
}
inline std::string* ReqAckModelInfoList::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckModelInfoList::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelInfoList.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckModelInfoList::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelInfoList.msg)
}

// int32 num = 3;
inline void ReqAckModelInfoList::clear_num() {
  num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelInfoList::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelInfoList::num() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelInfoList.num)
  return _internal_num();
}
inline void ReqAckModelInfoList::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_ = value;
}
inline void ReqAckModelInfoList::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelInfoList.num)
}

// int32 cur = 4;
inline void ReqAckModelInfoList::clear_cur() {
  cur_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelInfoList::_internal_cur() const {
  return cur_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelInfoList::cur() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelInfoList.cur)
  return _internal_cur();
}
inline void ReqAckModelInfoList::_internal_set_cur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_ = value;
}
inline void ReqAckModelInfoList::set_cur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelInfoList.cur)
}

// repeated .NFMsg.ModelInfoUnit info_list = 5;
inline int ReqAckModelInfoList::_internal_info_list_size() const {
  return info_list_.size();
}
inline int ReqAckModelInfoList::info_list_size() const {
  return _internal_info_list_size();
}
inline void ReqAckModelInfoList::clear_info_list() {
  info_list_.Clear();
}
inline ::NFMsg::ModelInfoUnit* ReqAckModelInfoList::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelInfoList.info_list)
  return info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelInfoUnit >*
ReqAckModelInfoList::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckModelInfoList.info_list)
  return &info_list_;
}
inline const ::NFMsg::ModelInfoUnit& ReqAckModelInfoList::_internal_info_list(int index) const {
  return info_list_.Get(index);
}
inline const ::NFMsg::ModelInfoUnit& ReqAckModelInfoList::info_list(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelInfoList.info_list)
  return _internal_info_list(index);
}
inline ::NFMsg::ModelInfoUnit* ReqAckModelInfoList::_internal_add_info_list() {
  return info_list_.Add();
}
inline ::NFMsg::ModelInfoUnit* ReqAckModelInfoList::add_info_list() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckModelInfoList.info_list)
  return _internal_add_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelInfoUnit >&
ReqAckModelInfoList::info_list() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckModelInfoList.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// ReqAckModelTarget

// int32 client = 1;
inline void ReqAckModelTarget::clear_client() {
  client_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelTarget::_internal_client() const {
  return client_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelTarget::client() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelTarget.client)
  return _internal_client();
}
inline void ReqAckModelTarget::_internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_ = value;
}
inline void ReqAckModelTarget::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelTarget.client)
}

// bytes msg = 2;
inline void ReqAckModelTarget::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckModelTarget::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelTarget.msg)
  return _internal_msg();
}
inline void ReqAckModelTarget::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelTarget.msg)
}
inline std::string* ReqAckModelTarget::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelTarget.msg)
  return _internal_mutable_msg();
}
inline const std::string& ReqAckModelTarget::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ReqAckModelTarget::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckModelTarget::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckModelTarget.msg)
}
inline void ReqAckModelTarget::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckModelTarget.msg)
}
inline void ReqAckModelTarget::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckModelTarget.msg)
}
inline std::string* ReqAckModelTarget::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckModelTarget::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelTarget.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckModelTarget::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelTarget.msg)
}

// int32 tar = 3;
inline void ReqAckModelTarget::clear_tar() {
  tar_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelTarget::_internal_tar() const {
  return tar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelTarget::tar() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelTarget.tar)
  return _internal_tar();
}
inline void ReqAckModelTarget::_internal_set_tar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tar_ = value;
}
inline void ReqAckModelTarget::set_tar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tar(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelTarget.tar)
}

// int32 level = 4;
inline void ReqAckModelTarget::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelTarget::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelTarget::level() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelTarget.level)
  return _internal_level();
}
inline void ReqAckModelTarget::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void ReqAckModelTarget::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelTarget.level)
}

// .NFMsg.ModelSyncUnit sync_unit = 5;
inline bool ReqAckModelTarget::_internal_has_sync_unit() const {
  return this != internal_default_instance() && sync_unit_ != nullptr;
}
inline bool ReqAckModelTarget::has_sync_unit() const {
  return _internal_has_sync_unit();
}
inline void ReqAckModelTarget::clear_sync_unit() {
  if (GetArenaNoVirtual() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
}
inline const ::NFMsg::ModelSyncUnit& ReqAckModelTarget::_internal_sync_unit() const {
  const ::NFMsg::ModelSyncUnit* p = sync_unit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::ModelSyncUnit*>(
      &::NFMsg::_ModelSyncUnit_default_instance_);
}
inline const ::NFMsg::ModelSyncUnit& ReqAckModelTarget::sync_unit() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelTarget.sync_unit)
  return _internal_sync_unit();
}
inline ::NFMsg::ModelSyncUnit* ReqAckModelTarget::release_sync_unit() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelTarget.sync_unit)
  
  ::NFMsg::ModelSyncUnit* temp = sync_unit_;
  sync_unit_ = nullptr;
  return temp;
}
inline ::NFMsg::ModelSyncUnit* ReqAckModelTarget::_internal_mutable_sync_unit() {
  
  if (sync_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::ModelSyncUnit>(GetArenaNoVirtual());
    sync_unit_ = p;
  }
  return sync_unit_;
}
inline ::NFMsg::ModelSyncUnit* ReqAckModelTarget::mutable_sync_unit() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelTarget.sync_unit)
  return _internal_mutable_sync_unit();
}
inline void ReqAckModelTarget::set_allocated_sync_unit(::NFMsg::ModelSyncUnit* sync_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sync_unit_;
  }
  if (sync_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_unit, submessage_arena);
    }
    
  } else {
    
  }
  sync_unit_ = sync_unit;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelTarget.sync_unit)
}

// -------------------------------------------------------------------

// ReqAckModelSwitch

// int32 client = 1;
inline void ReqAckModelSwitch::clear_client() {
  client_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelSwitch::_internal_client() const {
  return client_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelSwitch::client() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelSwitch.client)
  return _internal_client();
}
inline void ReqAckModelSwitch::_internal_set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_ = value;
}
inline void ReqAckModelSwitch::set_client(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelSwitch.client)
}

// bytes msg = 2;
inline void ReqAckModelSwitch::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckModelSwitch::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelSwitch.msg)
  return _internal_msg();
}
inline void ReqAckModelSwitch::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelSwitch.msg)
}
inline std::string* ReqAckModelSwitch::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelSwitch.msg)
  return _internal_mutable_msg();
}
inline const std::string& ReqAckModelSwitch::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ReqAckModelSwitch::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckModelSwitch::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckModelSwitch.msg)
}
inline void ReqAckModelSwitch::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckModelSwitch.msg)
}
inline void ReqAckModelSwitch::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckModelSwitch.msg)
}
inline std::string* ReqAckModelSwitch::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckModelSwitch::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelSwitch.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckModelSwitch::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelSwitch.msg)
}

// int32 tar = 3;
inline void ReqAckModelSwitch::clear_tar() {
  tar_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelSwitch::_internal_tar() const {
  return tar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelSwitch::tar() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelSwitch.tar)
  return _internal_tar();
}
inline void ReqAckModelSwitch::_internal_set_tar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tar_ = value;
}
inline void ReqAckModelSwitch::set_tar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tar(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelSwitch.tar)
}

// -------------------------------------------------------------------

// ModelViewSyncUnit

// .NFMsg.Ident player_id = 1;
inline bool ModelViewSyncUnit::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ModelViewSyncUnit::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::NFMsg::Ident& ModelViewSyncUnit::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ModelViewSyncUnit::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelViewSyncUnit.player_id)
  return _internal_player_id();
}
inline ::NFMsg::Ident* ModelViewSyncUnit::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelViewSyncUnit.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ModelViewSyncUnit::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ModelViewSyncUnit::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelViewSyncUnit.player_id)
  return _internal_mutable_player_id();
}
inline void ModelViewSyncUnit::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelViewSyncUnit.player_id)
}

// .NFMsg.ModelViewSyncUnit.EViewPlayerType player_type = 2;
inline void ModelViewSyncUnit::clear_player_type() {
  player_type_ = 0;
}
inline ::NFMsg::ModelViewSyncUnit_EViewPlayerType ModelViewSyncUnit::_internal_player_type() const {
  return static_cast< ::NFMsg::ModelViewSyncUnit_EViewPlayerType >(player_type_);
}
inline ::NFMsg::ModelViewSyncUnit_EViewPlayerType ModelViewSyncUnit::player_type() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelViewSyncUnit.player_type)
  return _internal_player_type();
}
inline void ModelViewSyncUnit::_internal_set_player_type(::NFMsg::ModelViewSyncUnit_EViewPlayerType value) {
  
  player_type_ = value;
}
inline void ModelViewSyncUnit::set_player_type(::NFMsg::ModelViewSyncUnit_EViewPlayerType value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:NFMsg.ModelViewSyncUnit.player_type)
}

// .NFMsg.Vector3 camera_pos = 3;
inline bool ModelViewSyncUnit::_internal_has_camera_pos() const {
  return this != internal_default_instance() && camera_pos_ != nullptr;
}
inline bool ModelViewSyncUnit::has_camera_pos() const {
  return _internal_has_camera_pos();
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::_internal_camera_pos() const {
  const ::NFMsg::Vector3* p = camera_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::camera_pos() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelViewSyncUnit.camera_pos)
  return _internal_camera_pos();
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::release_camera_pos() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelViewSyncUnit.camera_pos)
  
  ::NFMsg::Vector3* temp = camera_pos_;
  camera_pos_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::_internal_mutable_camera_pos() {
  
  if (camera_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    camera_pos_ = p;
  }
  return camera_pos_;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::mutable_camera_pos() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelViewSyncUnit.camera_pos)
  return _internal_mutable_camera_pos();
}
inline void ModelViewSyncUnit::set_allocated_camera_pos(::NFMsg::Vector3* camera_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_pos_);
  }
  if (camera_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_pos, submessage_arena);
    }
    
  } else {
    
  }
  camera_pos_ = camera_pos;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelViewSyncUnit.camera_pos)
}

// .NFMsg.Vector3 camera_rot = 4;
inline bool ModelViewSyncUnit::_internal_has_camera_rot() const {
  return this != internal_default_instance() && camera_rot_ != nullptr;
}
inline bool ModelViewSyncUnit::has_camera_rot() const {
  return _internal_has_camera_rot();
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::_internal_camera_rot() const {
  const ::NFMsg::Vector3* p = camera_rot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::camera_rot() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelViewSyncUnit.camera_rot)
  return _internal_camera_rot();
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::release_camera_rot() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelViewSyncUnit.camera_rot)
  
  ::NFMsg::Vector3* temp = camera_rot_;
  camera_rot_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::_internal_mutable_camera_rot() {
  
  if (camera_rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    camera_rot_ = p;
  }
  return camera_rot_;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::mutable_camera_rot() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelViewSyncUnit.camera_rot)
  return _internal_mutable_camera_rot();
}
inline void ModelViewSyncUnit::set_allocated_camera_rot(::NFMsg::Vector3* camera_rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_rot_);
  }
  if (camera_rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_rot, submessage_arena);
    }
    
  } else {
    
  }
  camera_rot_ = camera_rot;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelViewSyncUnit.camera_rot)
}

// .NFMsg.Vector3 model_pos = 5;
inline bool ModelViewSyncUnit::_internal_has_model_pos() const {
  return this != internal_default_instance() && model_pos_ != nullptr;
}
inline bool ModelViewSyncUnit::has_model_pos() const {
  return _internal_has_model_pos();
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::_internal_model_pos() const {
  const ::NFMsg::Vector3* p = model_pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::model_pos() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelViewSyncUnit.model_pos)
  return _internal_model_pos();
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::release_model_pos() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelViewSyncUnit.model_pos)
  
  ::NFMsg::Vector3* temp = model_pos_;
  model_pos_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::_internal_mutable_model_pos() {
  
  if (model_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    model_pos_ = p;
  }
  return model_pos_;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::mutable_model_pos() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelViewSyncUnit.model_pos)
  return _internal_mutable_model_pos();
}
inline void ModelViewSyncUnit::set_allocated_model_pos(::NFMsg::Vector3* model_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_pos_);
  }
  if (model_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_pos, submessage_arena);
    }
    
  } else {
    
  }
  model_pos_ = model_pos;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelViewSyncUnit.model_pos)
}

// .NFMsg.Vector3 model_rot = 6;
inline bool ModelViewSyncUnit::_internal_has_model_rot() const {
  return this != internal_default_instance() && model_rot_ != nullptr;
}
inline bool ModelViewSyncUnit::has_model_rot() const {
  return _internal_has_model_rot();
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::_internal_model_rot() const {
  const ::NFMsg::Vector3* p = model_rot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::model_rot() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelViewSyncUnit.model_rot)
  return _internal_model_rot();
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::release_model_rot() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelViewSyncUnit.model_rot)
  
  ::NFMsg::Vector3* temp = model_rot_;
  model_rot_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::_internal_mutable_model_rot() {
  
  if (model_rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    model_rot_ = p;
  }
  return model_rot_;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::mutable_model_rot() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelViewSyncUnit.model_rot)
  return _internal_mutable_model_rot();
}
inline void ModelViewSyncUnit::set_allocated_model_rot(::NFMsg::Vector3* model_rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_rot_);
  }
  if (model_rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_rot, submessage_arena);
    }
    
  } else {
    
  }
  model_rot_ = model_rot;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelViewSyncUnit.model_rot)
}

// .NFMsg.Vector3 model_scale = 7;
inline bool ModelViewSyncUnit::_internal_has_model_scale() const {
  return this != internal_default_instance() && model_scale_ != nullptr;
}
inline bool ModelViewSyncUnit::has_model_scale() const {
  return _internal_has_model_scale();
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::_internal_model_scale() const {
  const ::NFMsg::Vector3* p = model_scale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Vector3*>(
      &::NFMsg::_Vector3_default_instance_);
}
inline const ::NFMsg::Vector3& ModelViewSyncUnit::model_scale() const {
  // @@protoc_insertion_point(field_get:NFMsg.ModelViewSyncUnit.model_scale)
  return _internal_model_scale();
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::release_model_scale() {
  // @@protoc_insertion_point(field_release:NFMsg.ModelViewSyncUnit.model_scale)
  
  ::NFMsg::Vector3* temp = model_scale_;
  model_scale_ = nullptr;
  return temp;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::_internal_mutable_model_scale() {
  
  if (model_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Vector3>(GetArenaNoVirtual());
    model_scale_ = p;
  }
  return model_scale_;
}
inline ::NFMsg::Vector3* ModelViewSyncUnit::mutable_model_scale() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ModelViewSyncUnit.model_scale)
  return _internal_mutable_model_scale();
}
inline void ModelViewSyncUnit::set_allocated_model_scale(::NFMsg::Vector3* model_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_scale_);
  }
  if (model_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      model_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model_scale, submessage_arena);
    }
    
  } else {
    
  }
  model_scale_ = model_scale;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ModelViewSyncUnit.model_scale)
}

// -------------------------------------------------------------------

// ReqAckModelViewSync

// int32 sequence = 1;
inline void ReqAckModelViewSync::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelViewSync::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckModelViewSync::sequence() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelViewSync.sequence)
  return _internal_sequence();
}
inline void ReqAckModelViewSync::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void ReqAckModelViewSync::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelViewSync.sequence)
}

// .NFMsg.ModelViewSyncUnit sync_unit = 2;
inline bool ReqAckModelViewSync::_internal_has_sync_unit() const {
  return this != internal_default_instance() && sync_unit_ != nullptr;
}
inline bool ReqAckModelViewSync::has_sync_unit() const {
  return _internal_has_sync_unit();
}
inline void ReqAckModelViewSync::clear_sync_unit() {
  if (GetArenaNoVirtual() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
}
inline const ::NFMsg::ModelViewSyncUnit& ReqAckModelViewSync::_internal_sync_unit() const {
  const ::NFMsg::ModelViewSyncUnit* p = sync_unit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::ModelViewSyncUnit*>(
      &::NFMsg::_ModelViewSyncUnit_default_instance_);
}
inline const ::NFMsg::ModelViewSyncUnit& ReqAckModelViewSync::sync_unit() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelViewSync.sync_unit)
  return _internal_sync_unit();
}
inline ::NFMsg::ModelViewSyncUnit* ReqAckModelViewSync::release_sync_unit() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelViewSync.sync_unit)
  
  ::NFMsg::ModelViewSyncUnit* temp = sync_unit_;
  sync_unit_ = nullptr;
  return temp;
}
inline ::NFMsg::ModelViewSyncUnit* ReqAckModelViewSync::_internal_mutable_sync_unit() {
  
  if (sync_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::ModelViewSyncUnit>(GetArenaNoVirtual());
    sync_unit_ = p;
  }
  return sync_unit_;
}
inline ::NFMsg::ModelViewSyncUnit* ReqAckModelViewSync::mutable_sync_unit() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelViewSync.sync_unit)
  return _internal_mutable_sync_unit();
}
inline void ReqAckModelViewSync::set_allocated_sync_unit(::NFMsg::ModelViewSyncUnit* sync_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sync_unit_;
  }
  if (sync_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_unit, submessage_arena);
    }
    
  } else {
    
  }
  sync_unit_ = sync_unit;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelViewSync.sync_unit)
}

// bytes msg = 3;
inline void ReqAckModelViewSync::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckModelViewSync::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelViewSync.msg)
  return _internal_msg();
}
inline void ReqAckModelViewSync::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelViewSync.msg)
}
inline std::string* ReqAckModelViewSync::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelViewSync.msg)
  return _internal_mutable_msg();
}
inline const std::string& ReqAckModelViewSync::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ReqAckModelViewSync::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckModelViewSync::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckModelViewSync.msg)
}
inline void ReqAckModelViewSync::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckModelViewSync.msg)
}
inline void ReqAckModelViewSync::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckModelViewSync.msg)
}
inline std::string* ReqAckModelViewSync::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckModelViewSync::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelViewSync.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckModelViewSync::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelViewSync.msg)
}

// -------------------------------------------------------------------

// ReqAckModelView

// .NFMsg.Ident player_id = 1;
inline bool ReqAckModelView::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAckModelView::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::NFMsg::Ident& ReqAckModelView::_internal_player_id() const {
  const ::NFMsg::Ident* p = player_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::NFMsg::Ident*>(
      &::NFMsg::_Ident_default_instance_);
}
inline const ::NFMsg::Ident& ReqAckModelView::player_id() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelView.player_id)
  return _internal_player_id();
}
inline ::NFMsg::Ident* ReqAckModelView::release_player_id() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelView.player_id)
  
  ::NFMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::NFMsg::Ident* ReqAckModelView::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::NFMsg::Ident>(GetArenaNoVirtual());
    player_id_ = p;
  }
  return player_id_;
}
inline ::NFMsg::Ident* ReqAckModelView::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelView.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAckModelView::set_allocated_player_id(::NFMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelView.player_id)
}

// repeated .NFMsg.ModelViewSyncUnit sync_unit = 2;
inline int ReqAckModelView::_internal_sync_unit_size() const {
  return sync_unit_.size();
}
inline int ReqAckModelView::sync_unit_size() const {
  return _internal_sync_unit_size();
}
inline void ReqAckModelView::clear_sync_unit() {
  sync_unit_.Clear();
}
inline ::NFMsg::ModelViewSyncUnit* ReqAckModelView::mutable_sync_unit(int index) {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelView.sync_unit)
  return sync_unit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelViewSyncUnit >*
ReqAckModelView::mutable_sync_unit() {
  // @@protoc_insertion_point(field_mutable_list:NFMsg.ReqAckModelView.sync_unit)
  return &sync_unit_;
}
inline const ::NFMsg::ModelViewSyncUnit& ReqAckModelView::_internal_sync_unit(int index) const {
  return sync_unit_.Get(index);
}
inline const ::NFMsg::ModelViewSyncUnit& ReqAckModelView::sync_unit(int index) const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelView.sync_unit)
  return _internal_sync_unit(index);
}
inline ::NFMsg::ModelViewSyncUnit* ReqAckModelView::_internal_add_sync_unit() {
  return sync_unit_.Add();
}
inline ::NFMsg::ModelViewSyncUnit* ReqAckModelView::add_sync_unit() {
  // @@protoc_insertion_point(field_add:NFMsg.ReqAckModelView.sync_unit)
  return _internal_add_sync_unit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NFMsg::ModelViewSyncUnit >&
ReqAckModelView::sync_unit() const {
  // @@protoc_insertion_point(field_list:NFMsg.ReqAckModelView.sync_unit)
  return sync_unit_;
}

// bytes msg = 3;
inline void ReqAckModelView::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReqAckModelView::msg() const {
  // @@protoc_insertion_point(field_get:NFMsg.ReqAckModelView.msg)
  return _internal_msg();
}
inline void ReqAckModelView::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:NFMsg.ReqAckModelView.msg)
}
inline std::string* ReqAckModelView::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:NFMsg.ReqAckModelView.msg)
  return _internal_mutable_msg();
}
inline const std::string& ReqAckModelView::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void ReqAckModelView::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReqAckModelView::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NFMsg.ReqAckModelView.msg)
}
inline void ReqAckModelView::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NFMsg.ReqAckModelView.msg)
}
inline void ReqAckModelView::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NFMsg.ReqAckModelView.msg)
}
inline std::string* ReqAckModelView::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReqAckModelView::release_msg() {
  // @@protoc_insertion_point(field_release:NFMsg.ReqAckModelView.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckModelView::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:NFMsg.ReqAckModelView.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NFMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NFMsg::PosSyncUnit_EMoveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::PosSyncUnit_EMoveType>() {
  return ::NFMsg::PosSyncUnit_EMoveType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::EffectData_EResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::EffectData_EResultType>() {
  return ::NFMsg::EffectData_EResultType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqAckPlayerChat_EGameChatChannel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckPlayerChat_EGameChatChannel>() {
  return ::NFMsg::ReqAckPlayerChat_EGameChatChannel_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ReqAckPlayerChat_EGameChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::NFMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}
template <> struct is_proto_enum< ::NFMsg::ModelViewSyncUnit_EViewPlayerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NFMsg::ModelViewSyncUnit_EViewPlayerType>() {
  return ::NFMsg::ModelViewSyncUnit_EViewPlayerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NFMsgShare_2eproto
